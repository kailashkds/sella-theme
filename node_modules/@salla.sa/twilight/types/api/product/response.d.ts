import {Category as ShortCategory, Product, SuccessResponse} from "../../common";
import {Category} from "./request";

type offerType = 'buy_x_get_y' | 'percentage' | 'fixed_amount';
type paymentMethod = {
    id: number;
    slug: 'bank';
    name: 'BankTransfer';
};

export interface SizeGuide {
    name: string;
    description: string;
}

export interface Offer {
    id: number;
    name: string;
    message: string;
    expiry_date: string | '2022-02-22 00:00:00';
    formatted_date: string;
    offer_type: offerType;
    applied_to: 'order' | 'category' | 'product' | 'paymentMethod';
    buy: {
        type: 'product' | 'category';
        quantity: number;
        products?: Product[];
        categories?: ShortCategory[];
        min_amount?: number; //when offer_type != 'buy_x_get_y'
        min_items?: number; //when offer_type != 'buy_x_get_y'
        payment_methods: paymentMethod[];
    };
    get: {
        products?: Product[];
        categories?: ShortCategory[];
        type: 'product' | 'category';
        discount_type: 'free-product' | 'percentage';
        quantity?: number;//when discount_type == 'percentage'
        discount_amount?: number; //when offer_type != 'buy_x_get_y' or get.discount_type !='free-product'
    }
}

/**
 * Gifting System
 */
export interface Gift {
    quantity: number;
    product: Product;
    sender_name: string;
    images: GiftImage[];
    texts: GiftText[];
}

export interface GiftImage {
    id: number;
    url: string;
}

export interface GiftText {
    id: number;
    text: string;
}

export interface ProductDetail {
    id: number;
    promotion: Promotion;
    sku: string;
    mpn: null;
    gtin: null;
    type: string;
    name: string;
    short_link_code: string;
    urls: Urls;
    price: PreTaxPrice;
    taxed_price: PreTaxPrice;
    pre_tax_price: PreTaxPrice;
    tax: PreTaxPrice;
    description: string;
    quantity: null;
    status: string;
    is_available: boolean;
    views: null;
    sale_price: PreTaxPrice;
    sale_end: null;
    require_shipping: boolean;
    cost_price: string;
    weight: number;
    weight_type: string;
    weight_label: null;
    with_tax: boolean;
    included_tax: boolean;
    url: string;
    main_image: string;
    images: Image[];
    show_purchase_count: boolean;
    sold_quantity: number;
    sold_quantity_desc: string;
    rating: Rating;
    favorite: null;
    has_special_price: boolean;
    regular_price: PreTaxPrice;
    features: Features;
    max_items_per_user: number;
    maximum_quantity_per_order: null;
    show_in_app: boolean;
    has_size_guide: boolean;
    notify_quantity: null;
    hide_quantity: boolean;
    unlimited_quantity: boolean;
    managed_by_branches: boolean;
    services_blocks: ServicesBlocks;
    calories: null;
    customized_sku_quantity: boolean;
    options: Option[];
    skus: Skus[];
    tags: any[];
}

export interface Features {
    show_you_may_like: boolean;
    show_rating: boolean;
    availability_notify: null;
    show_remaining_quantity: boolean;
    "quick-buy": boolean;
    buy_as_gift: boolean;
}

export interface Image {
    id: number;
    url: string;
    main: boolean;
    three_d_image_url: string;
    alt: string;
    video_url: string;
    type: string;
    sort: number;
}

export interface Option {
    id: number;
    name: string;
    description: null;
    type: string;
    required: boolean;
    associated_with_order_time: number;
    availability_range: boolean;
    not_same_day_order: boolean;
    choose_date_time: null;
    from_date_time: null;
    to_date_time: null;
    sort: null;
    advance: boolean;
    display_type: string;
    visibility: string;
    translations: OptionTranslations;
    values: Value[];
}

export interface OptionTranslations {
    ar: PurpleAr;
}

export interface PurpleAr {
    option_name: string;
    description: null;
}

export interface Value {
    id: number;
    name: string;
    price: PreTaxPrice;
    display_value: null;
    advance: boolean;
    option_id: number;
    image_url: null;
    hashed_display_value: null;
    translations: ValueTranslations;
}

export interface PreTaxPrice {
    amount: number;
    currency: Currency;
}

export enum Currency {
    Sar = "SAR",
}

export interface ValueTranslations {
    ar: FluffyAr;
}

export interface FluffyAr {
    option_details_name: string;
}

export interface Promotion {
    title: null;
    sub_title: null;
}

export interface Rating {
    total: number;
    count: number;
    rate: number;
}

export interface ServicesBlocks {
    installments: any[];
}

export interface Skus {
    id: number;
    price: PreTaxPrice;
    regular_price: PreTaxPrice;
    sale_price: PreTaxPrice;
    stock_quantity: null;
    barcode: null;
    sku: string;
    mpn: null;
    gtin: null;
    related_options: number[];
    related_option_values: number[];
    weight: null;
    weight_type: null;
    weight_label: null;
}

export interface Urls {
    customer: string;
    admin: string;
}


export namespace ProductResponse {
    export interface search extends SuccessResponse {
        data: Product[];
        cursor: {
            current: number;
            previous?: string;
            next?: string;
            count: number;
        };
    }

    export interface getPrice extends SuccessResponse {
        data: {
            price: number;
            regular_price: number;
            has_sale_price: boolean;
        }
    }

    export interface categories extends SuccessResponse {
        data: Category | Category[]; //single category when getting subCategories by passing categoryId
    }

    export interface offers extends SuccessResponse {
        data: Offer[] | [];
    }

    export interface sizeGuides extends SuccessResponse {
        data: Array<SizeGuide>;
    }

    export interface giftResponse extends SuccessResponse {
        data: Gift
    }

    export interface giftToCart extends SuccessResponse {
        data: { redirect: string }
    }

    export interface giftImageUpload extends SuccessResponse {
        data: { url: string }
    }

    export interface detail extends SuccessResponse {
        data: ProductDetail
    }

    export interface lists extends SuccessResponse {
        data: Array<ProductDetail>
    }
}