type ProductType = 'product' | 'service' | 'group_products' | 'codes' | 'digital' | 'food' | 'donating';
type Rating = 1 | 2 | 3 | 4 | 5;
type RequestError = Error & { response: any }
type RequestErrorEvent = (callback: (error: RequestError | string) => void) => void;
type RequestErrorEventWithData<data> = (callback: (error: RequestError | string, data) => void) => void;

export interface Price {
    amount: string;
    currency: string;
}

export interface SuccessResponse {
    status: 200;
    success: true;
    data: {
        message?: string;
        events?: { [event_name: string]: any };
        [key: string]: any;
    };
}

export interface ErrorResponse {
    status: 422 | 404;
    success: false;
    error: {
        message?: string | 'alert.invalid_fields';
        code?: any;
        case?: string | 'resend_counter' | 'invalid_code';
        events?: { [event_name: string]: any };
        fields?: { [field_name: string]: Array<string> };
        [key: string]: any;
    }
}

export interface Currency {
    code: string | 'SAR';
    name: string;
    symbol: string;
    amount?: number;
    country_code?: string;
}

export interface Product {
    id: number;
    name: string;
    type: ProductType;
    promotion: {
        title?: string;
        sub_title?: string;
    };
    price: Price;
    sale_price?: Price;
    regular_price: Price;
    has_special_price: boolean;
    status: 'sale' | 'out';
    is_available: boolean;
    sku?: string;
    currency: string | 'SAR';
    url: string;
    thumbnail: string;
    calories?: number;
}

export interface Category {
    id: number;
    name: string;
    url: string;
}

export interface RequestInfo {
    endPoint: string;
    method: string;
    payload: any,
    options: {},
}