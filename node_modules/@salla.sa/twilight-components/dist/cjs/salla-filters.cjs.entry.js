/*!
 * Crafted with ❤ by Salla
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-e85bd084.js');
const interfaces = require('./interfaces-56bf4b49.js');

const sallaFiltersCss = ":host{display:block}.s-rating-stars-small{line-height:12px}.s-filters-radio{background-image:none !important}";

const SallaFilters = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.changed = index.createEvent(this, "changed", 7);
    this.isReady = false; //to avoid triggering the changed event
    this.filters = undefined;
    this.isSidebarOpen = undefined;
    this.filtersData = {};
    this.apply = undefined;
    this.reset = undefined;
    salla.event.on('filters::hidden', () => this.host.style.display = 'none');
    salla.lang.onLoaded(() => {
      this.apply = salla.lang.get('pages.checkout.apply');
      this.reset = salla.lang.get('pages.categories.filters_reset');
    });
    salla.event.on('filters::fetched', ({ filters }) => {
      this.host.style.display = '';
      let freshFilterData = {};
      this.filters = filters
        .map((filter) => {
        filter.label = {
          category_id: salla.lang.get('common.titles.categories'),
          brand_id: salla.lang.get('common.titles.brands'),
          rating: salla.lang.get('pages.categories.filter_rating'),
          price_range: salla.lang.get('pages.categories.filter_price'),
        }[filter.key] || filter.label;
        filter.inputType = interfaces.FilterOptionInputType.CHECKBOX;
        if (filter.key == 'rating') {
          filter.inputType = interfaces.FilterOptionInputType.RADIO;
          //@ts-ignore
          let { max, min } = filter.values;
          //@ts-ignore
          filter.values = [5, 4, 3, 2, 1].filter(stars => stars >= min || stars <= max);
        }
        //when getting new filters, maybe less than we had, so let's get from the old one, only what is existed now.
        if (this.filtersData[filter.key]) {
          freshFilterData[filter.key] = this.filtersData[filter.key];
        }
        return filter;
      });
      this.filtersData = freshFilterData;
    });
  }
  connectedCallback() {
    try {
      let filters = (new URLSearchParams(window.location.search)).get('filters');
      this.filtersData = filters ? JSON.parse(decodeURIComponent(filters)) : {};
    }
    catch (e) {
      salla.logger.warn('failed to get filters from url', e.message);
    }
  }
  //TODO:: move all @methods into one section
  async getFilters() {
    return this.filtersData;
  }
  async applyFilters() {
    if (!this.isReady) {
      return;
    }
    //todo:: why we need this🤔
    window.scrollTo({ top: 0, behavior: 'smooth' });
    setTimeout(() => {
      window.history.pushState({}, '', salla.url.addParamToUrl('filters', encodeURIComponent(JSON.stringify(this.filtersData))));
      salla.event.emit('salla-filters::changed', this.filtersData);
      this.changed.emit(this.filtersData);
    }, 300);
  }
  async resetFilters() {
    this.filtersData = {};
    this.host.childNodes.forEach((widget) => widget.reset && widget.reset());
    salla.event.emit('salla-filters::reset');
    return this.applyFilters();
  }
  /**
   * @param {{target:HTMLInputElement}} event
   * @param option
   * @param value
   * @private
   */
  handleOptionChange(event, option, value) {
    if (option.type === interfaces.FilterOptionTypes.RANGE) {
      this.filtersData[option.key] = value;
      return;
    }
    let isChecked = event.target.checked;
    if (event.target.type == interfaces.FilterOptionInputType.RADIO) {
      isChecked && (this.filtersData[option.key] = value);
      isChecked || (delete this.filtersData[option.key]);
      return;
    }
    //it's checkbox
    this.filtersData[option.key] = this.filtersData[option.key] || [];
    if (isChecked) {
      this.filtersData[option.key].push(value);
      return;
    }
    this.filtersData[option.key] = this.filtersData[option.key].filter(val => val != value);
  }
  render() {
    var _a, _b;
    return index.h(index.Host, null, (_a = this.filters) === null || _a === void 0 ? void 0 :
      _a.map(option => index.h("salla-filters-widget", { option: option, filtersData: this.filtersData, onChanged: ({ detail: { event, option, value } }) => this.handleOptionChange(event, option, value) })), ((_b = this.filters) === null || _b === void 0 ? void 0 : _b.length) && index.h("div", { class: "s-filters-footer" }, index.h("salla-button", { color: 'primary', onClick: () => this.applyFilters() }, this.apply), index.h("salla-button", { color: 'gray', fill: 'outline', onClick: () => this.resetFilters() }, this.reset)));
  }
  componentDidLoad() {
    this.isReady = true;
  }
  get host() { return index.getElement(this); }
};
SallaFilters.style = sallaFiltersCss;

exports.salla_filters = SallaFilters;

//# sourceMappingURL=salla-filters.cjs.entry.js.map