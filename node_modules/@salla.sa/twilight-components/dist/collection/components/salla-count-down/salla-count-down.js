/*!
 * Crafted with ❤ by Salla
 */
import { Host, h } from '@stencil/core';
export class SallaCountDown {
  constructor() {
    this.date = undefined;
    this.boxed = undefined;
    this.size = 'md';
    this.color = 'dark';
    this.labeled = undefined;
    this.endText = undefined;
    this.digits = 'auto';
    this.endOfDay = undefined;
    this.daysLabel = undefined;
    this.hoursLabel = undefined;
    this.minutesLabel = undefined;
    this.secondsLabel = undefined;
    this.endLabel = undefined;
    this.invalidDate = undefined;
    this.offerEnded = false;
    this.countInterval = undefined;
    this.days = undefined;
    this.hours = undefined;
    this.minutes = undefined;
    this.seconds = undefined;
    this.days = this.number(0);
    this.hours = this.number(0);
    this.minutes = this.number(0);
    this.seconds = this.number(0);
    salla.lang.onLoaded(() => {
      this.daysLabel = salla.lang.get('pages.checkout.day');
      this.hoursLabel = salla.lang.get('pages.checkout.hour');
      this.minutesLabel = salla.lang.get('pages.checkout.minute');
      this.invalidDate = salla.lang.get('blocks.buy_as_gift.incorrect_date');
      this.secondsLabel = salla.lang.get('pages.checkout.second');
      this.endLabel = salla.lang.get('pages.checkout.offer_ended');
    });
    if (this.date && this.isValidDate(this.date)) {
      this.startCountDown();
    }
  }
  /**
   * End the count down
   * */
  async endCountDown() {
    clearInterval(this.countInterval);
    this.offerEnded = true;
    this.days = this.number(0);
    this.hours = this.number(0);
    this.minutes = this.number(0);
    this.seconds = this.number(0);
  }
  isValidDate(date) {
    let dateHasDashes = date.includes('-'), dateParts = date.split(' '), testedDate;
    if (dateHasDashes) {
      testedDate = dateParts[0].replace(/-/g, '/');
    }
    else {
      testedDate = dateParts[0];
    }
    return !isNaN(Date.parse(testedDate));
  }
  number(digit) {
    return salla.helpers.number(digit, this.digits === 'en');
  }
  startCountDown() {
    let countDownDate = new Date(this.date.replace(/-/g, "/"));
    if (this.endOfDay || this.date.split(' ').length === 1) {
      countDownDate.setHours(23, 59, 59, 999);
    }
    let countDownTime = countDownDate.getTime();
    this.countInterval = setInterval(() => {
      let now = new Date().getTime();
      let distance = countDownTime - now;
      this.days = this.number(Math.floor(distance / (1000 * 60 * 60 * 24)));
      this.hours = this.number(Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));
      this.minutes = this.number(Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)));
      this.seconds = this.number(Math.floor((distance % (1000 * 60)) / 1000));
      if (distance < 0) {
        this.endCountDown();
      }
    }, 1000);
  }
  render() {
    if (!this.date) {
      return "";
    }
    else if (this.date && !this.isValidDate(this.date)) {
      return h("div", { class: "s-count-down-text-center" }, this.invalidDate);
    }
    return (h(Host, { class: "s-count-down-wrapper" }, h("ul", { class: `s-count-down-list ${this.boxed ? 's-count-down-boxed' : ''} ${this.offerEnded ? 's-count-down-ended' : ''} s-count-down-${this.size} s-count-down-${this.color}` }, h("li", { class: "s-count-down-item" }, h("div", { class: "s-count-down-item-value" }, this.seconds), this.labeled && h("div", { class: "s-count-down-item-label" }, this.secondsLabel)), h("li", { class: "s-count-down-item" }, h("div", { class: "s-count-down-item-value" }, this.minutes), this.labeled && h("div", { class: "s-count-down-item-label" }, this.minutesLabel)), h("li", { class: "s-count-down-item" }, h("div", { class: "s-count-down-item-value" }, this.hours), this.labeled && h("div", { class: "s-count-down-item-label" }, this.hoursLabel)), h("li", { class: "s-count-down-item" }, h("div", { class: "s-count-down-item-value" }, this.days), this.labeled && h("div", { class: "s-count-down-item-label" }, this.daysLabel))), this.offerEnded && h("div", { class: "s-count-down-end-text" }, !!this.endText ? this.endText : this.endLabel)));
  }
  static get is() { return "salla-count-down"; }
  static get originalStyleUrls() {
    return {
      "$": ["salla-count-down.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["salla-count-down.css"]
    };
  }
  static get properties() {
    return {
      "date": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The date to count down to\nFormat: MMM DD, YYYY HH:mm:ss (e.g. Jan 2, 2023 16:37:52)"
        },
        "attribute": "date",
        "reflect": false
      },
      "boxed": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If true, the count down numbers will be appear in a boxes"
        },
        "attribute": "boxed",
        "reflect": false
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'sm' | 'md' | 'lg'",
          "resolved": "\"lg\" | \"md\" | \"sm\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The size of the count down"
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "'md'"
      },
      "color": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'primary' | 'light' | 'dark'",
          "resolved": "\"dark\" | \"light\" | \"primary\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The color of the count down"
        },
        "attribute": "color",
        "reflect": false,
        "defaultValue": "'dark'"
      },
      "labeled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Show labels for each count down number"
        },
        "attribute": "labeled",
        "reflect": false
      },
      "endText": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The text to show when the count down ends"
        },
        "attribute": "end-text",
        "reflect": false
      },
      "digits": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'en' | 'auto'",
          "resolved": "\"auto\" | \"en\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The digits lang to show in the count down"
        },
        "attribute": "digits",
        "reflect": false,
        "defaultValue": "'auto'"
      },
      "endOfDay": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If true, the count down will end at the end of the day"
        },
        "attribute": "end-of-day",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "daysLabel": {},
      "hoursLabel": {},
      "minutesLabel": {},
      "secondsLabel": {},
      "endLabel": {},
      "invalidDate": {},
      "offerEnded": {},
      "countInterval": {},
      "days": {},
      "hours": {},
      "minutes": {},
      "seconds": {}
    };
  }
  static get methods() {
    return {
      "endCountDown": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "End the count down",
          "tags": []
        }
      }
    };
  }
}
//# sourceMappingURL=salla-count-down.js.map
