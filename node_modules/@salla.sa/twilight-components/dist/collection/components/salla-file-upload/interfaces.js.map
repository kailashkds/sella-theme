{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../src/components/salla-file-upload/interfaces.ts"],"names":[],"mappings":"AAEA,MAAM,CAAN,IAAY,UAUX;AAVD,WAAY,UAAU;EAClB,2CAAQ,CAAA;EACR,2CAAQ,CAAA;EACR,qEAAqB,CAAA;EACrB,uDAAc,CAAA;EACd,yEAAuB,CAAA;EACvB,mEAAoB,CAAA;EACpB,kFAA4B,CAAA;EAC5B,iDAAW,CAAA;EACX,uDAAc,CAAA;AAClB,CAAC,EAVW,UAAU,KAAV,UAAU,QAUrB;AAED,MAAM,CAAN,IAAY,MAMX;AAND,WAAY,MAAM;EACd,qCAAS,CAAA;EACT,mCAAQ,CAAA;EACR,qCAAS,CAAA;EACT,mCAAQ,CAAA;EACR,qCAAS,CAAA;AACb,CAAC,EANW,MAAM,KAAN,MAAM,QAMjB;AAED,MAAM,CAAN,IAAY,UAIX;AAJD,WAAY,UAAU;EAClB,6CAAS,CAAA;EACT,6CAAS,CAAA;EACT,6CAAS,CAAA;AACb,CAAC,EAJW,UAAU,KAAV,UAAU,QAIrB;AAQD;;GAEG;AACH,MAAM,OAAO,YAAY;CAoCxB;AAED,cAAc;AACd;;;;GAIG;AACH,MAAM,OAAO,IAAK,SAAQ,YAAY;CAAG","sourcesContent":["export { };\n\nexport enum FileStatus {\n    INIT = 1,\n    IDLE = 2,\n    PROCESSING_QUEUED = 9,\n    PROCESSING = 3,\n    PROCESSING_COMPLETE = 5,\n    PROCESSING_ERROR = 6,\n    PROCESSING_REVERT_ERROR = 10,\n    LOADING = 7,\n    LOAD_ERROR = 8\n}\n\nexport enum Status {\n    EMPTY = 0,\n    IDLE = 1,\n    ERROR = 2,\n    BUSY = 3,\n    READY = 4\n}\n\nexport enum FileOrigin {\n    INPUT = 1,\n    LIMBO = 2,\n    LOCAL = 3\n}\n\n// TODO replace all references to `ActualFileObject` with native `File`\n/**\n * @deprecated Don't use this type explicitly within your code. It'll be replaced with the native `File` type in a future release.\n */\nexport type ActualFileObject = Blob & { readonly lastModified: number; readonly name: string; };\n\n/**\n * A custom FilePond File.\n */\nexport class FilePondFile {\n /** Returns the ID of the file. */\n id: string;\n /** Returns the server id of the file. */\n serverId: string;\n /** Returns the source of the file. */\n source: ActualFileObject | string;\n /** Returns the origin of the file. */\n origin: FileOrigin;\n /** Returns the current status of the file. */\n status: FileStatus;\n /** Returns the File object. */\n file: ActualFileObject;\n /** Returns the file extensions. */\n fileExtension: string;\n /** Returns the size of the file. */\n fileSize: number;\n /** Returns the type of the file. */\n fileType: string;\n /** Returns the full name of the file. */\n filename: string;\n /** Returns the name of the file without extension. */\n filenameWithoutExtension: string;\n\n /** Aborts loading of this file */\n abortLoad: () => void;\n /** Aborts processing of this file */\n abortProcessing: () => void;\n /**\n  * Retrieve metadata saved to the file, pass a key to retrieve\n  * a specific part of the metadata (e.g. 'crop' or 'resize').\n  * If no key is passed, the entire metadata object is returned.\n  */\n getMetadata: (key?: string) => any;\n /** Add additional metadata to the file */\n setMetadata: (key: string, value: any, silent?: boolean) => void;\n}\n\n// TODO delete\n/**\n * A custom FilePond File. Don't confuse this with the native `File` type.\n *\n * @deprecated use `FilePondFile` instead. This type will be removed in a future release.\n */\nexport class File extends FilePondFile {}\n\nexport interface ServerUrl {\n    url: string;\n    method?: 'GET' | 'POST' | 'PUT' | 'DELETE';\n    withCredentials?: boolean;\n    headers?: { [key: string]: string | boolean | number };\n    timeout?: number;\n\n    /**\n     * Called when server response is received, useful for getting\n     * the unique file id from the server response.\n     */\n    onload?: (response: any) => number | string;\n    /**\n     * Called when server error is received, receives the response\n     * body, useful to select the relevant error data.\n     */\n    onerror?: (responseBody: any) => any;\n    /**\n     * Called with the formdata object right before it is sent,\n     * return extended formdata object to make changes.\n     */\n    ondata?: (data: FormData) => FormData;\n}\n\nexport type ProgressServerConfigFunction = (\n    /**\n     * Flag indicating if the resource has a length that can be calculated.\n     * If not, the totalDataAmount has no significant value.  Setting this to\n     * false switches the FilePond loading indicator to infinite mode.\n     */\n    isLengthComputable: boolean,\n    /** The amount of data currently transferred. */\n    loadedDataAmount: number,\n    /** The total amount of data to be transferred. */\n    totalDataAmount: number,\n) => void;\n\nexport interface ProcessServerChunkTransferOptions {\n    chunkTransferId: string,\n    chunkServer: ServerUrl,\n    /**\n     * Chunk uploads enabled\n     */\n    chunkUploads: boolean,\n    /**\n     * Forcing use of chunk uploads even for files smaller than chunk size\n     */\n    chunkForce: boolean,\n    /**\n     * Size of chunks\n     */\n    chunkSize: number,\n    /**\n     * Amount of times to retry upload of a chunk when it fails\n     */\n    chunkRetryDelays: number[]\n}\n\nexport type ProcessServerConfigFunction = (\n    /** The name of the input field. */\n    fieldName: string,\n    /** The actual file object to send. */\n    file: ActualFileObject,\n    metadata: { [key: string]: any },\n    /**\n     * Should call the load method when done and pass the returned server file id.\n     * This server file id is then used later on when reverting or restoring a file\n     * so that your server knows which file to return without exposing that info\n     * to the client.\n     */\n    load: (p: string | { [key: string]: any }) => void,\n    /** Call if something goes wrong, will exit after. */\n    error: (errorText: string) => void,\n    /**\n     * Should call the progress method to update the progress to 100% before calling load().\n     * Setting computable to false switches the loading indicator to infinite mode.\n     */\n    progress: ProgressServerConfigFunction,\n    /** Let FilePond know the request has been cancelled. */\n    abort: () => void,\n    /**\n     * Let Filepond know and store the current file chunk transfer id so it can track the\n     * progress of the whole file upload\n     */\n    transfer: (transferId: string) => void,\n\n    options: ProcessServerChunkTransferOptions\n) => void;\n\nexport type RevertServerConfigFunction = (\n    /** Server file id of the file to restore. */\n    uniqueFieldId: any,\n    /** Should call the load method when done. */\n    load: () => void,\n    /** Call if something goes wrong, will exit after. */\n    error: (errorText: string) => void\n) => void;\n\nexport type RestoreServerConfigFunction = (\n    /** Server file id of the file to restore. */\n    uniqueFileId: any,\n    /** Should call the load method with a file object or blob when done. */\n    load: (file: ActualFileObject) => void,\n    /** Call if something goes wrong, will exit after. */\n    error: (errorText: string) => void,\n    /**\n     * Should call the progress method to update the progress to 100% before calling load().\n     * Setting computable to false switches the loading indicator to infinite mode.\n     */\n    progress: ProgressServerConfigFunction,\n    /** Let FilePond know the request has been cancelled. */\n    abort: () => void,\n    /**\n     * Can call the headers method to supply FilePond with early response header string.\n     * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders\n     */\n    headers: (headersString: string) => void\n) => void;\n\nexport type LoadServerConfigFunction = (\n    source: any,\n    /** Should call the load method with a file object or blob when done. */\n    load: (file: ActualFileObject | Blob) => void,\n    /** Call if something goes wrong, will exit after. */\n    error: (errorText: string) => void,\n    /**\n     * Should call the progress method to update the progress to 100% before calling load().\n     * Setting computable to false switches the loading indicator to infinite mode.\n     */\n    progress: ProgressServerConfigFunction,\n    /** Let FilePond know the request has been cancelled. */\n    abort: () => void,\n    /**\n     * Can call the headers method to supply FilePond with early response header string.\n     * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders>\n     */\n    headers: (headersString: string) => void\n) => void;\n\nexport type FetchServerConfigFunction = (\n    url: string,\n    /** Should call the load method with a file object or blob when done. */\n    load: (file: ActualFileObject | Blob) => void,\n    /** Call if something goes wrong, will exit after. */\n    error: (errorText: string) => void,\n    /**\n     * Should call the progress method to update the progress to 100% before calling load().\n     * Setting computable to false switches the loading indicator to infinite mode.\n     */\n    progress: ProgressServerConfigFunction,\n    /** Let FilePond know the request has been cancelled. */\n    abort: () => void,\n    /**\n     * Can call the headers method to supply FilePond with early response header string.\n     * https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders\n     */\n    headers: (headersString: string) => void\n) => void;\n\nexport type RemoveServerConfigFunction = (\n    /** Local file source */\n    source: any,\n    /** Call when done */\n    load: () => void,\n    /** Call if something goes wrong, will exit after. */\n    error: (errorText: string) => void\n) => void;\n\nexport interface FilePondInitialFile {\n    /** The server file reference. */\n    source: string;\n    options: {\n        /** Origin of file being added. */\n        type: 'input' | 'limbo' | 'local';\n        /** Mock file information. */\n        file?: {\n            name?: string;\n            size?: number;\n            type?: string;\n        };\n        /** File initial metadata. */\n        metadata?: { [key: string]: any };\n    };\n}\n\nexport interface FilePondServerConfigProps {\n    /**\n     * Immediately upload new files to the server.\n     * @default true\n     */\n    instantUpload?: boolean;\n    /**\n     * The maximum number of files that can be uploaded in parallel.\n     * @default 2\n     */\n    maxParallelUploads?: number;\n\n    /**\n     * Server API Configuration.\n     * See: https://pqina.nl/filepond/docs/patterns/api/server\n     * @default null\n     */\n    server?: string | {\n        url?: string\n        timeout?: number\n        headers?: { [key: string]: string | boolean | number };\n        process?: string | ServerUrl | ProcessServerConfigFunction | null;\n        revert?: string | ServerUrl | RevertServerConfigFunction | null;\n        restore?: string | ServerUrl | RestoreServerConfigFunction | null;\n        load?: string | ServerUrl | LoadServerConfigFunction | null;\n        fetch?: string | ServerUrl | FetchServerConfigFunction | null;\n        remove?: RemoveServerConfigFunction | null;\n    } | null;\n\n    /**\n     * Enable chunk uploads\n     * @default false\n     */\n    chunkUploads?: boolean;\n    /**\n     * Force use of chunk uploads even for files smaller than chunk size\n     * @default false\n     */\n    chunkForce?: boolean;\n    /**\n     * Size of chunks (5MB default)\n     * @default 5000000\n     */\n    chunkSize?: number;\n    /**\n     * Amount of times to retry upload of a chunk when it fails\n     * @default [500, 1000, 3000]\n     */\n    chunkRetryDelays?: number[];\n\n    /**\n     * A list of file locations that should be loaded immediately.\n     * See: https://pqina.nl/filepond/docs/patterns/api/filepond-object/#setting-initial-files\n     * @default []\n     */\n    files?: Array<FilePondInitialFile | ActualFileObject | Blob | string>;\n}\n\nexport interface FilePondDragDropProps {\n    /**\n     * FilePond will catch all files dropped on the webpage.\n     * @default false\n     */\n    dropOnPage?: boolean;\n    /**\n     * Require drop on the FilePond element itself to catch the file.\n     * @default true\n     */\n    dropOnElement?: boolean;\n    /**\n     * When enabled, files are validated before they are dropped.\n     * A file is not added when it’s invalid.\n     * @default false\n     */\n    dropValidation?: boolean;\n    /**\n     * Ignored file names when handling dropped directories.\n     * Dropping directories is not supported on all browsers.\n     * @default ['.ds_store', 'thumbs.db', 'desktop.ini']\n     */\n    ignoredFiles?: string[];\n}\n\nexport interface FilePondLabelProps {\n    /**\n     * The decimal separator used to render numbers.\n     * By default this is determined automatically.\n     * @default 'auto'\n     */\n    labelDecimalSeparator?: string;\n    /**\n     * The thousands separator used to render numbers.\n     * By default this is determined automatically.\n     * @default 'auto'\n     */\n    labelThousandsSeparator?: string;\n    /**\n     * Default label shown to indicate this is a drop area.\n     * FilePond will automatically bind browse file events to\n     * the element with CSS class .filepond--label-action.\n     * @default 'Drag & Drop your files or <span class=\"filepond--label-action\"> Browse </span>'\n     */\n    labelIdle?: string;\n    /**\n     * Label shown when the field contains invalid files and is validated by the parent form.\n     * @default 'Field contains invalid files'\n     */\n    labelInvalidField?: string;\n    /**\n     * Label used while waiting for file size information.\n     * @default 'Waiting for size'\n     */\n    labelFileWaitingForSize?: string;\n    /**\n     * Label used when no file size information was received.\n     * @default 'Size not available'\n     */\n    labelFileSizeNotAvailable?: string;\n    /**\n     * Label used when showing the number of files and there is only one.\n     * @default 'file in list'\n     */\n    labelFileCountSingular?: string;\n    /**\n     * Label used when showing the number of files and there is more than one.\n     * @default 'files in list'\n     */\n    labelFileCountPlural?: string;\n    /**\n     * Label used while loading a file.\n     * @default 'Loading'\n     */\n    labelFileLoading?: string;\n    /**\n     * Label used when file is added (assistive only).\n     * @default 'Added'\n     */\n    labelFileAdded?: string;\n    /**\n     * Label used when file load failed.\n     * @default 'Error during load'\n     */\n    labelFileLoadError?: ((error: any) => string) | string;\n    /**\n     * Label used when file is removed (assistive only).\n     * @default 'Removed'\n     */\n    labelFileRemoved?: string;\n    /**\n     * Label used when something went during during removing the file upload.\n     * @default 'Error during remove'\n     */\n    labelFileRemoveError?: ((error: any) => string) | string;\n    /**\n     * Label used when uploading a file.\n     * @default 'Uploading'\n     */\n    labelFileProcessing?: string;\n    /**\n     * Label used when file upload has completed.\n     * @default 'Upload complete'\n     */\n    labelFileProcessingComplete?: string;\n    /**\n     * Label used when upload was cancelled.\n     * @default 'Upload cancelled'\n     */\n    labelFileProcessingAborted?: string;\n    /**\n     * Label used when something went wrong during file upload.\n     * @default 'Error during upload'\n     */\n    labelFileProcessingError?: ((error: any) => string) | string;\n    /**\n     * Label used when something went wrong during reverting the file upload.\n     * @default 'Error during revert'\n     */\n    labelFileProcessingRevertError?: ((error: any) => string) | string;\n    /**\n     * Label used to indicate to the user that an action can be cancelled.\n     * @default 'tap to cancel'\n     */\n    labelTapToCancel?: string;\n    /**\n     * Label used to indicate to the user that an action can be retried.\n     * @default 'tap to retry'\n     */\n    labelTapToRetry?: string;\n    /**\n     * Label used to indicate to the user that an action can be undone.\n     * @default 'tap to undo'\n     */\n    labelTapToUndo?: string;\n    /**\n     * Label used for remove button.\n     * @default 'Remove'\n     */\n    labelButtonRemoveItem?: string;\n    /**\n     * Label used for abort load button.\n     * @default 'Abort'\n     */\n    labelButtonAbortItemLoad?: string;\n    /**\n     * Label used for retry load.\n     * @default 'Retry'\n     */\n    labelButtonRetryItemLoad?: string;\n    /**\n     * Label used for abort upload button.\n     * @default 'Cancel'\n     */\n    labelButtonAbortItemProcessing?: string;\n    /**\n     * Label used for undo upload button.\n     * @default 'Undo'\n     */\n    labelButtonUndoItemProcessing?: string;\n    /**\n     * Label used for retry upload button.\n     * @default 'Retry'\n     */\n    labelButtonRetryItemProcessing?: string;\n    /**\n     * Label used for upload button.\n     * @default 'Upload'\n     */\n    labelButtonProcessItem?: string;\n}\n\nexport interface FilePondSvgIconProps {\n    /**\n     * The icon used for remove actions.\n     * @default '<svg></svg>'\n     */\n    iconRemove?: string;\n    /**\n     * The icon used for process actions.\n     * @default '<svg></svg>'\n     */\n    iconProcess?: string;\n    /**\n     * The icon used for retry actions.\n     * @default '<svg></svg>'\n     */\n    iconRetry?: string;\n    /**\n     * The icon used for undo actions.\n     * @default '<svg></svg>'\n     */\n    iconUndo?: string;\n    /**\n     * The icon used for done.\n     * @default '<svg></svg>'\n     */\n    iconDone?: string;\n}\n\nexport interface FilePondErrorDescription {\n    type: string;\n    code: number;\n    body: string;\n}\n\nexport interface FilePondCallbackProps {\n    /** FilePond instance has been created and is ready. */\n    oninit?: () => void;\n    /**\n     * FilePond instance throws a warning. For instance\n     * when the maximum amount of files has been reached.\n     * Optionally receives file if error is related to a\n     * file object.\n     */\n    onwarning?: (error: any, file?: FilePondFile, status?: any) => void;\n    /**\n     * FilePond instance throws an error. Optionally receives\n     * file if error is related to a file object.\n     */\n    onerror?: (error: FilePondErrorDescription, file?: FilePondFile, status?: any) => void;\n    /** Started file load. */\n    onaddfilestart?: (file: FilePondFile) => void;\n    /** Made progress loading a file. */\n    onaddfileprogress?: (file: FilePondFile, progress: number) => void;\n    /** If no error, file has been successfully loaded. */\n    onaddfile?: (error: FilePondErrorDescription | null, file: FilePondFile) => void;\n    /** Started processing a file. */\n    onprocessfilestart?: (file: FilePondFile) => void;\n    /** Made progress processing a file. */\n    onprocessfileprogress?: (file: FilePondFile, progress: number) => void;\n    /** Aborted processing of a file. */\n    onprocessfileabort?: (file: FilePondFile) => void;\n    /** Processing of a file has been reverted. */\n    onprocessfilerevert?: (file: FilePondFile) => void;\n    /** If no error, Processing of a file has been completed. */\n    onprocessfile?: (error: FilePondErrorDescription | null, file: FilePondFile) => void;\n    /** Called when all files in the list have been processed. */\n    onprocessfiles?: () => void;\n    /** File has been removed. */\n    onremovefile?: (error: FilePondErrorDescription | null, file: FilePondFile) => void;\n    /**\n     * File has been transformed by the transform plugin or\n     * another plugin subscribing to the prepare_output filter.\n     * It receives the file item and the output data.\n     */\n    onpreparefile?: (file: FilePondFile, output: any) => void;\n    /** A file has been added or removed, receives a list of file items. */\n    onupdatefiles?: (files: FilePondFile[]) => void;\n    /* Called when a file is clicked or tapped. **/\n    onactivatefile?: (file: FilePondFile) => void;\n    /** Called when the files have been reordered */\n    onreorderfiles?: (files: FilePondFile[]) => void;\n}\n\nexport interface FilePondHookProps {\n    /**\n     * FilePond is about to allow this item to be dropped, it can be a URL or a File object.\n     *\n     * Return `true` or `false` depending on if you want to allow the item to be dropped.\n     */\n    beforeDropFile?: (file: FilePondFile | string) => boolean;\n    /**\n     * FilePond is about to add this file.\n     *\n     * Return `false` to prevent adding it, or return a `Promise` and resolve with `true` or `false`.\n     */\n    beforeAddFile?: (item: FilePondFile) => boolean | Promise<boolean>;\n    /**\n     * FilePond is about to remove this file.\n     *\n     * Return `false` to prevent adding it, or return a `Promise` and resolve with `true` or `false`.\n     */\n    beforeRemoveFile?: (item: FilePondFile) => boolean | Promise<boolean>;\n}\n\nexport interface FilePondStyleProps {\n    /**\n     * Set a different layout render mode.\n     * @default null\n     */\n    stylePanelLayout?: 'integrated' | 'compact' | 'circle' | 'integrated circle' | 'compact circle' | null;\n    /**\n     * Set a forced aspect ratio for the FilePond drop area.\n     *\n     * Accepts human readable aspect ratios like `1:1` or numeric aspect ratios like `0.75`.\n     * @default null\n     */\n    stylePanelAspectRatio?: string | null;\n    /**\n     * Set a forced aspect ratio for the file items.\n     *\n     * Useful when rendering cropped or fixed aspect ratio images in grid view.\n     * @default null\n     */\n    styleItemPanelAspectRatio?: string | null;\n    /**\n     * The position of the remove item button.\n     * @default 'left'\n     */\n    styleButtonRemoveItemPosition?: string;\n    /**\n     * The position of the remove item button.\n     * @default 'right'\n     */\n    styleButtonProcessItemPosition?: string;\n    /**\n     * The position of the load indicator.\n     * @default 'right'\n     */\n    styleLoadIndicatorPosition?: string;\n    /**\n     * The position of the progress indicator.\n     * @default 'right'\n     */\n    styleProgressIndicatorPosition?: string;\n    /**\n     * Enable to align the remove button to the left side of the file item.\n     * @default false\n     */\n    styleButtonRemoveItemAlign?: boolean;\n}\n\nexport type CaptureAttribute = \"camera\" | \"microphone\" | \"camcorder\";\n\nexport interface FilePondBaseProps {\n    /**\n     * The ID to add to the root element.\n     * @default null\n     */\n    id?: string | null;\n    /**\n     * The input field name to use.\n     * @default 'filepond'\n     */\n    name?: string;\n    /**\n     * Class Name to put on wrapper.\n     * @default null\n     */\n    className?: string | null;\n    /**\n     * Sets the required attribute to the output field.\n     * @default false\n     */\n    required?: boolean;\n    /**\n     * Sets the disabled attribute to the output field.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * Sets the given value to the capture attribute.\n     * @default null\n     */\n    captureMethod?: CaptureAttribute | null;\n    /**\n     * Set to false to prevent FilePond from setting the file input field `accept` attribute to the value of the `acceptedFileTypes`.\n     */\n    allowSyncAcceptAttribute?: boolean;\n    /**\n     * Enable or disable drag n’ drop.\n     * @default true\n     */\n    allowDrop?: boolean;\n    /**\n     * Enable or disable file browser.\n     * @default true\n     */\n    allowBrowse?: boolean;\n    /**\n     * Enable or disable pasting of files. Pasting files is not\n     * supported on all browsers.\n     * @default true\n     */\n    allowPaste?: boolean;\n    /**\n     * Enable or disable adding multiple files.\n     * @default false\n     */\n    allowMultiple?: boolean;\n    /**\n     * Allow drop to replace a file, only works when allowMultiple is false.\n     * @default true\n     */\n    allowReplace?: boolean;\n    /**\n     * Allows the user to revert file upload.\n     * @default true\n     */\n    allowRevert?: boolean;\n    /**\n     * Allows user to process a file. When set to false, this removes the file upload button.\n     * @default true\n     */\n    allowProcess?: boolean;\n    /**\n     * Allows the user to reorder the file items\n     * @default false\n     */\n    allowReorder?: boolean;\n    /**\n     * Allow only selecting directories with browse (no support for filtering dnd at this point)\n     * @default false\n     */\n    allowDirectoriesOnly?: boolean;\n\n    /**\n     * Require the file to be successfully reverted before continuing.\n     * @default false\n     */\n    forceRevert?: boolean;\n\n    /**\n     * The maximum number of files that filepond pond can handle.\n     * @default null\n     */\n    maxFiles?: number | null;\n    /**\n     * Enables custom validity messages.\n     * @default false\n     */\n    checkValidity?: boolean;\n\n    /**\n     * Set to false to always add items to beginning or end of list.\n     * @default true\n     */\n    itemInsertLocationFreedom?: boolean;\n    /**\n     * Default index in list to add items that have been dropped at the top of the list.\n     * @default 'before'\n     */\n    itemInsertLocation?: 'before' | 'after' | ((a: FilePondFile, b: FilePondFile) => number);\n    /**\n     * The interval to use before showing each item being added to the list.\n     * @default 75\n     */\n    itemInsertInterval?: number;\n    /**\n     * The base value used to calculate file size\n     * @default 1000\n     */\n    fileSizeBase?: number;\n\n    /**\n     * Tells FilePond to store files in hidden file input elements so they can be posted along with\n     * normal form post. This only works if the browser supports the DataTransfer constructor,\n     * this is the case on Firefox, Chrome, Chromium powered browsers and Safari version 14.1\n     * and higher.\n     * @default false\n     */\n    storeAsFile?: boolean;\n\n    /**\n     * Shows Powered by PQINA in footer. Can be disabled by setting to false, but please do\n     * link to https://pqina.nl somewhere else on your website, or otherwise donate to help\n     * keep the project alive.\n     * @default \"Powered by PQINA\"\n     */\n    credits?: false\n}\n\n// TODO delete\n/**\n * @deprecated use `FilePondOptions`. This will be removed in a future release.\n */\nexport interface FilePondOptionProps extends\n    FilePondDragDropProps,\n    FilePondServerConfigProps,\n    FilePondLabelProps,\n    FilePondSvgIconProps,\n    FilePondCallbackProps,\n    FilePondHookProps,\n    FilePondStyleProps,\n    FilePondBaseProps { }\n\nexport interface FilePondOptions extends\n    FilePondDragDropProps,\n    FilePondServerConfigProps,\n    FilePondLabelProps,\n    FilePondSvgIconProps,\n    FilePondCallbackProps,\n    FilePondHookProps,\n    FilePondStyleProps,\n    FilePondBaseProps { }\n\nexport type FilePondEventPrefixed = 'FilePond:init'\n    | 'FilePond:warning'\n    | 'FilePond:error'\n    | 'FilePond:addfilestart'\n    | 'FilePond:addfileprogress'\n    | 'FilePond:addfile'\n    | 'FilePond:processfilestart'\n    | 'FilePond:processfileprogress'\n    | 'FilePond:processfileabort'\n    | 'FilePond:processfilerevert'\n    | 'FilePond:processfile'\n    | 'FilePond:removefile'\n    | 'FilePond:updatefiles'\n    | 'FilePond:reorderfiles';\n\nexport type FilePondEvent = 'init'\n    | 'warning'\n    | 'error'\n    | 'addfilestart'\n    | 'addfileprogress'\n    | 'addfile'\n    | 'processfilestart'\n    | 'processfileprogress'\n    | 'processfileabort'\n    | 'processfilerevert'\n    | 'processfile'\n    | 'removefile'\n    | 'updatefiles'\n    | 'reorderfiles';\n\nexport interface RemoveFileOptions  {\n    remove?: boolean;\n    revert?: boolean;\n}\n\nexport interface FilePond extends Required<FilePondOptions> {}\n"]}