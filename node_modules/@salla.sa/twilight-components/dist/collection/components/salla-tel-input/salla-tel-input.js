/*!
 * Crafted with ❤ by Salla
 */
import { Host, h } from '@stencil/core';
import TelInput from "intl-tel-input";
export class SallaTelInput {
  constructor() {
    this.phone = undefined;
    this.name = 'phone';
    this.countryCode = salla.config.get('user.country_code', 'SA') || 'SA';
    this.mobileRequired = undefined;
    this.countryCodeLabel = salla.lang.get('common.country_code');
    this.mobileLabel = salla.lang.get('common.elements.mobile');
    this.tooShort = salla.lang.get('common.errors.too_short', { attribute: this.mobileLabel });
    this.tooLong = salla.lang.get('common.errors.too_long', { attribute: this.mobileLabel });
    this.invalidCountryCode = salla.lang.get('common.errors.invalid_value', { attribute: this.countryCodeLabel });
    this.invalidNumber = salla.lang.get('common.errors.invalid_value', { attribute: this.mobileLabel });
    this.errorMap = [this.invalidNumber, this.invalidCountryCode, this.tooShort, this.tooLong, this.invalidNumber];
    salla.lang.onLoaded(() => {
      this.mobileLabel = salla.lang.get('common.elements.mobile');
      this.countryCodeLabel = salla.lang.get('common.elements.country_code');
      this.invalidNumber = salla.lang.get('common.errors.invalid_value', { attribute: this.mobileLabel });
      this.invalidCountryCode = salla.lang.get('common.errors.invalid_value', { attribute: this.countryCodeLabel });
      this.tooShort = salla.lang.get('common.errors.too_short', { attribute: this.mobileLabel });
      this.tooLong = salla.lang.get('common.errors.too_long', { attribute: this.mobileLabel });
      this.mobileRequired = salla.lang.get('common.errors.field_required', { attribute: this.mobileLabel });
      this.errorMap = [this.invalidNumber, this.invalidCountryCode, this.tooShort, this.tooLong, this.invalidNumber];
    });
  }
  /**
   * Get current values
   * @return {{mobile:number,countryCode:'SA'|string}}
   */
  async getValues() {
    return {
      [this.name]: this.phone = this.phoneInput.value,
      countryCode: this.countryCode = this.countryCodeInput.value
    };
  }
  /**
   * Is current data valid or not
   * @return {boolean}
   */
  async isValid() {
    this.reset();
    if (this.iti.isValidNumber())
      return true;
    if (!this.phoneInput.value.trim()) {
      this.phoneInput.classList.add("s-has-error");
      this.errorMsg.innerText = this.mobileRequired || 'The mobile is required';
      return;
    }
    this.phoneInput.classList.add("s-has-error");
    let errorCode = this.iti.getValidationError();
    this.errorMsg.innerText = this.errorMap[errorCode] || '';
    salla.logger.info('Phone number (' + this.countryCode + ' - ' + this.phone + ') is not valid, error code ' + errorCode);
    return false;
  }
  initTelInput() {
    salla.helpers.inputDigitsOnly(this.phoneInput);
    this.iti = TelInput(this.phoneInput, {
      initialCountry: this.countryCode || 'sa',
      preferredCountries: ['sa', 'ae', 'kw', 'bh', 'qa', 'iq', 'om', 'ye', 'eg', 'jo', 'sy', 'ps', 'sd', 'lb', 'dz', 'tn', 'ma', 'ly'],
      formatOnDisplay: false,
      separateDialCode: true,
      autoPlaceholder: 'aggressive',
      utilsScript: 'https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.12/js/utils.min.js',
    });
    this.phoneInput.addEventListener("countrychange", () => {
      let data = this.iti.getSelectedCountryData();
      let value = data.iso2.toUpperCase();
      this.countryCodeInput.value = value;
      this.countryCode = value;
      this.phoneEntered.emit({ number: this.phone, country_code: value });
    });
    // on blur: validate
    // this.phoneInput.addEventListener('blur', () => this.isValid());
    // on keyup / change flag: reset
    this.phoneInput.addEventListener('input', (e) => {
      salla.helpers.inputDigitsOnly(e.target);
      this.reset();
      this.phoneEntered.emit({ number: e.target.value, country_code: this.countryCode });
    });
  }
  reset() {
    this.phoneInput.classList.remove("s-has-error");
    this.errorMsg.innerHTML = "";
  }
  ;
  handleCountryInput(event) {
    if (!!this.phone) {
      this.phoneEntered.emit({ number: event.target.value, country_code: this.countryCode });
    }
  }
  render() {
    return (h(Host, { class: "s-tel-input" }, h("input", { type: "tel", name: this.name, value: this.phone, onChange: (event) => this.handleCountryInput(event), ref: el => this.phoneInput = el, enterkeyhint: "next", autocomplete: "tel", class: "s-tel-input-control tel-input s-ltr" }), h("span", { class: "s-tel-input-error-msg", ref: el => this.errorMsg = el }), h("input", { type: "hidden", name: "country_code", value: this.countryCode, ref: el => this.countryCodeInput = el, class: "country_code" })));
  }
  componentDidLoad() {
    this.initTelInput();
  }
  static get is() { return "salla-tel-input"; }
  static get originalStyleUrls() {
    return {
      "$": ["salla-tel-input.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["salla-tel-input.css"]
    };
  }
  static get properties() {
    return {
      "phone": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Current mobile number"
        },
        "attribute": "phone",
        "reflect": false
      },
      "name": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "input name"
        },
        "attribute": "name",
        "reflect": false,
        "defaultValue": "'phone'"
      },
      "countryCode": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Current country_code"
        },
        "attribute": "country-code",
        "reflect": false,
        "defaultValue": "salla.config.get('user.country_code', 'SA') || 'SA'"
      }
    };
  }
  static get states() {
    return {
      "mobileRequired": {},
      "countryCodeLabel": {},
      "mobileLabel": {},
      "tooShort": {},
      "tooLong": {},
      "invalidCountryCode": {},
      "invalidNumber": {},
      "errorMap": {}
    };
  }
  static get events() {
    return [{
        "method": "phoneEntered",
        "name": "phoneEntered",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Event emmitted when user enters a phone number."
        },
        "complexType": {
          "original": "Phone",
          "resolved": "Phone",
          "references": {
            "Phone": {
              "location": "import",
              "path": "./interfaces"
            }
          }
        }
      }];
  }
  static get methods() {
    return {
      "getValues": {
        "complexType": {
          "signature": "() => Promise<{ [x: string]: string; countryCode: string; }>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<{ [x: string]: string; countryCode: string; }>"
        },
        "docs": {
          "text": "Get current values",
          "tags": [{
              "name": "return",
              "text": undefined
            }]
        }
      },
      "isValid": {
        "complexType": {
          "signature": "() => Promise<boolean>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<boolean>"
        },
        "docs": {
          "text": "Is current data valid or not",
          "tags": [{
              "name": "return",
              "text": undefined
            }]
        }
      }
    };
  }
  static get elementRef() { return "host"; }
}
//# sourceMappingURL=salla-tel-input.js.map
