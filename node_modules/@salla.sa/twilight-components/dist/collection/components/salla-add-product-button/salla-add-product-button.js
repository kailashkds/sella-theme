/*!
 * Crafted with ❤ by Salla
 */
import { Host, h } from '@stencil/core';
import Cart from '../../assets/svg/cart.svg';
export class SallaAddProductButton {
  constructor() {
    this.hostAttributes = {};
    this.channels = undefined;
    this.subscribedOptions = undefined;
    this.quickBuy = undefined;
    this.quantity = undefined;
    this.donatingAmount = undefined;
    this.notifyOptionsAvailability = undefined;
    this.productId = undefined;
    this.supportStickyBar = undefined;
    this.productStatus = 'sale';
    this.productType = 'product';
    this.hasOutOfStockOption = undefined;
    this.hasSubscribedOptions = undefined;
    this.selectedOptions = [];
    this.showQuickBuy = undefined;
    salla.onReady(() => {
      this.showQuickBuy = this.quickBuy && !!salla.config.get('store.settings.buy_now');
    });
  }
  getLabel() {
    if (this.productStatus === 'sale' && this.supportStickyBar && window.innerWidth <= 768 && this.showQuickBuy) {
      return Cart;
    }
    if (this.productStatus === 'sale' && this.productType === 'booking') {
      return salla.lang.get('pages.cart.book_now');
    }
    if (this.productStatus === 'sale') {
      return salla.lang.get('pages.cart.add_to_cart');
    }
    if (this.productType !== 'donating') {
      return salla.lang.get('pages.products.out_of_stock');
    }
    // donating
    return salla.lang.get('pages.products.donation_exceed');
  }
  addProductToCart(event) {
    if (this.productType === 'booking') {
      event.preventDefault();
      return this.addBookingProduct();
    }
    // we want to ignore the click action when the type of button is submit a form
    if (this.hostAttributes.type === 'submit') {
      return false;
    }
    event.preventDefault();
    /**
     * by default the quick add is just an alias for add item function
     * but its work only when the id is the only value is passed via the object
     * so we will filter the object entities to remove null and zero values in case we don't want the normal add item action
     */
    const data = Object.entries({
      id: this.productId,
      donation_amount: this.donatingAmount,
      quantity: this.quantity,
      endpoint: 'quickAdd'
    }).reduce((a, [k, v]) => (v ? (a[k] = v, a) : a), {});
    return salla.cart.addItem(data)
      .then(response => {
      this.selectedOptions = [];
      this.success.emit(response);
    })
      .catch(error => this.failed.emit(error));
  }
  addBookingProduct() {
    if (salla.config.isGuest()) {
      salla.auth.api.setAfterLoginEvent('booking::add', this.productId);
      salla.event.dispatch('login::open');
      return;
    }
    return salla.booking.add(this.productId)
      .then(resp => this.success.emit(resp))
      .catch(error => this.failed.emit(error));
  }
  getBtnAttributes() {
    for (let i = 0; i < this.host.attributes.length; i++) {
      if (!['id', 'class'].includes(this.host.attributes[i].name)) {
        this.hostAttributes[this.host.attributes[i].name] = this.host.attributes[i].value;
      }
    }
    return this.hostAttributes;
  }
  getQuickBuyBtnAttributes() {
    return Object.assign(Object.assign({}, this.getBtnAttributes()), { type: this.supportStickyBar && window.innerWidth <= 768 ? 'plain' : this.productType == 'donating' ? 'donate' : 'buy' });
  }
  componentWillLoad() {
    var _a;
    this.passedLabel = this.host.innerHTML.replace('<!---->', '').trim();
    if (!!this.passedLabel && window.innerWidth >= 768) {
      (_a = this.btn) === null || _a === void 0 ? void 0 : _a.setText(this.passedLabel);
      return;
    }
    if (this.host.hasAttribute('type') && this.host.getAttribute('type') === 'submit' && this.supportStickyBar) {
      window.addEventListener('resize', () => {
        var _a, _b;
        if (window.innerWidth >= 768 && !!this.passedLabel) {
          (_a = this.btn) === null || _a === void 0 ? void 0 : _a.setText(this.passedLabel);
        }
        else {
          (_b = this.btn) === null || _b === void 0 ? void 0 : _b.setText(this.getLabel());
        }
      });
    }
  }
  render() {
    var _a;
    //TODO:: find a better fix, this is a patch for issue that duplicates the buttons more than twice @see the screenshot inside this folder
    if ((_a = this.host.closest('.swiper-slide')) === null || _a === void 0 ? void 0 : _a.classList.contains('swiper-slide-duplicate')) {
      return '';
    }
    if (this.hasSubscribedOptions) {
      return h(Host, null, h("salla-product-availability", Object.assign({}, this.getBtnAttributes(), { "is-subscribed": true }), h("span", { class: "s-hidden" }, h("slot", null))));
    }
    if ((this.productStatus === 'out-and-notify' && this.channels) || this.hasOutOfStockOption) {
      return h(Host, null, h("salla-product-availability", Object.assign({}, this.getBtnAttributes()), h("span", { class: "s-hidden" }, h("slot", null))));
    }
    return h(Host, { class: {
        's-add-product-button-with-quick-buy': this.showQuickBuy,
        's-add-product-button-with-sticky-bar': this.supportStickyBar
      } }, h("salla-button", Object.assign({ color: this.productStatus === 'sale' ? 'primary' : 'light', type: "button", fill: this.productStatus === 'sale' ? 'solid' : 'outline', ref: el => this.btn = el, onClick: event => this.addProductToCart(event), disabled: this.productStatus !== 'sale' }, this.getBtnAttributes(), { "loader-position": "center" }), h("slot", null)), this.showQuickBuy ? h("salla-quick-buy", Object.assign({}, this.getQuickBuyBtnAttributes())) : '');
  }
  componentDidLoad() {
    if (!this.notifyOptionsAvailability) {
      return;
    }
    salla.event.on('product-options::change', async (data) => {
      var _a, _b;
      if (!['thumbnail', 'color', 'single-option'].includes(data.option.type)) {
        return;
      }
      this.hasSubscribedOptions = false;
      this.selectedOptions = await ((_a = document.querySelector(`salla-product-options[product-id="${this.productId}"]`)) === null || _a === void 0 ? void 0 : _a.getSelectedOptions());
      this.hasOutOfStockOption = await ((_b = document.querySelector(`salla-product-options[product-id="${this.productId}"]`)) === null || _b === void 0 ? void 0 : _b.hasOutOfStockOption());
      let subscribedDetails = salla.storage.get(`product-${this.productId}-subscribed-options`);
      if (!subscribedDetails && !this.subscribedOptions || !this.hasOutOfStockOption) {
        return;
      }
      if (salla.config.isGuest()) {
        const parsedSubscribedDetails = subscribedDetails ? subscribedDetails.map(ids => ids.split(',').map(id => parseInt(id))) : [];
        this.hasSubscribedOptions = parsedSubscribedDetails.length > 0 && parsedSubscribedDetails.some(ids => ids.every(id => this.selectedOptions.some(option => option.id === id)));
      }
      else {
        this.hasSubscribedOptions = this.subscribedOptions && this.subscribedOptions !== 'null' && this.subscribedOptions !== '[]' ? JSON.parse(this.subscribedOptions).some(ids => ids.every(id => this.selectedOptions.some(option => option.id === id))) : false;
      }
    });
  }
  componentDidRender() {
    var _a, _b;
    //if label not passed, get label
    if (!!this.passedLabel && (!this.supportStickyBar || window.innerWidth >= 768)) {
      // if passed label, set it
      (_a = this.btn) === null || _a === void 0 ? void 0 : _a.setText(this.passedLabel);
      return;
    }
    (_b = this.btn) === null || _b === void 0 ? void 0 : _b.setText(this.getLabel());
    salla.lang.onLoaded(() => { var _a; return (_a = this.btn) === null || _a === void 0 ? void 0 : _a.setText(this.getLabel()); });
  }
  static get is() { return "salla-add-product-button"; }
  static get originalStyleUrls() {
    return {
      "$": ["salla-add-product-button.css"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["salla-add-product-button.css"]
    };
  }
  static get properties() {
    return {
      "channels": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Channels."
        },
        "attribute": "channels",
        "reflect": true
      },
      "subscribedOptions": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Subscribed Options ex: \"[[139487,2394739],[1212,1544]]\""
        },
        "attribute": "subscribed-options",
        "reflect": false
      },
      "quickBuy": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Support Quick Pay Button"
        },
        "attribute": "quick-buy",
        "reflect": true
      },
      "quantity": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Product Quantity"
        },
        "attribute": "quantity",
        "reflect": true
      },
      "donatingAmount": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Donating amount."
        },
        "attribute": "donating-amount",
        "reflect": true
      },
      "notifyOptionsAvailability": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Listen to product options availability."
        },
        "attribute": "notify-options-availability",
        "reflect": true
      },
      "productId": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Product id"
        },
        "attribute": "product-id",
        "reflect": true
      },
      "supportStickyBar": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Support themes that have a sticky bar"
        },
        "attribute": "support-sticky-bar",
        "reflect": true
      },
      "productStatus": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'sale' | 'out' | 'out-and-notify'",
          "resolved": "\"out\" | \"out-and-notify\" | \"sale\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Product Status.Defaults to `sale`"
        },
        "attribute": "product-status",
        "reflect": true,
        "defaultValue": "'sale'"
      },
      "productType": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'product' | 'service' | 'codes' | 'digital' | 'food' | 'donating' | 'group_products' | 'booking'",
          "resolved": "\"booking\" | \"codes\" | \"digital\" | \"donating\" | \"food\" | \"group_products\" | \"product\" | \"service\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Product type. Defaults to `product`"
        },
        "attribute": "product-type",
        "reflect": true,
        "defaultValue": "'product'"
      }
    };
  }
  static get states() {
    return {
      "hasOutOfStockOption": {},
      "hasSubscribedOptions": {},
      "selectedOptions": {},
      "showQuickBuy": {}
    };
  }
  static get events() {
    return [{
        "method": "success",
        "name": "success",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Custome DOM event emitter when product gets added to cart successfully."
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }, {
        "method": "failed",
        "name": "failed",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Custome DOM event emitter when product addition to cart fails."
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "host"; }
}
//# sourceMappingURL=salla-add-product-button.js.map
