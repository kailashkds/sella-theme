/*!
 * Crafted with ❤ by Salla
 */
import { Host, h } from '@stencil/core';
import Helper from '../../Helpers/Helper';
import { FilterOptionInputType, FilterOptionTypes } from "../salla-filters/interfaces";
export class SallaFiltersWidget {
  constructor() {
    this.initHeight = 195;
    this.widgetTitle = undefined;
    this.withLoadMore = undefined;
    this.filtersData = undefined;
    this.option = undefined;
    this.isOpen = true;
    this.isShowMore = false;
  }
  connectedCallback() {
    //lets be smart and don't show 5 and more link for 8 options
    this.withLoadMore = this.option.key != 'price' && Array.isArray(this.option.values) && this.option.values.length > 8;
    this.widgetTitle = this.option.label;
  }
  componentDidLoad() {
    this.widgetValues.scrollHeight < this.initHeight && (this.withLoadMore = false);
    (this.withLoadMore && this.widgetValues) && (this.widgetValues.style.maxHeight = `${this.initHeight}px`);
    this.widgetContent.style.height = `${this.widgetContent.scrollHeight}px`;
  }
  async reset() {
    if (this.option.type === FilterOptionTypes.RANGE) {
      this.priceRange.reset();
    }
    Array.from(this.host.querySelectorAll('input')).forEach(input => input.checked = false);
  }
  async showMore() {
    this.isShowMore = !this.isShowMore;
    this.widgetContent.style.height = 'auto';
    this.widgetValues.style.maxHeight = this.isShowMore ? `${this.widgetValues.scrollHeight}px` : `${this.initHeight}px`;
    setTimeout(() => {
      this.widgetContent.style.height = `${this.widgetContent.scrollHeight}px`;
    }, 400); // get height after time of collapse animtion (duration-300)
  }
  async toggleWidget() {
    this.isOpen = !this.isOpen;
    Helper.toggleElementClassIf(this.widgetContent, 's-filters-widget-opened', 's-filters-widget-closed', () => this.isOpen);
  }
  renderFilterOption(option) {
    if (![FilterOptionTypes.VALUES, FilterOptionTypes.MINIMUM, FilterOptionTypes.VARIANTS].includes(option.type)) {
      return '';
    }
    //@ts-ignore
    return option.values.map((filterOption, index) => {
      let value = typeof filterOption == 'number' ? filterOption : (filterOption.key || filterOption.value);
      return h("label", { class: "s-filters-label", htmlFor: `${option.key}-option-${index}` }, h("input", { id: `${option.key}-option-${index}`, name: option.key, type: option.inputType,
        //TODO:: debug more why sometimes it's not rendered as selected🤨
        checked: this.isSelectedOption(option, value), class: `s-filters-${option.inputType}`, onChange: e => this.changed.emit({ event: e, option: option, value: value }) }), this.getOptionLabel(option, filterOption));
    });
  }
  isSelectedOption(option, value) {
    if (!this.filtersData || !this.filtersData[option.key]) {
      return false;
    }
    return option.inputType === FilterOptionInputType.CHECKBOX
      ? this.filtersData[option.key].includes(value)
      : this.filtersData[option.key] == value;
  }
  getOptionLabel(option, filterOption) {
    if (option.key == 'rating') {
      //in amazon has stars & up, should we add it, to avoid those people who will come to say I selected 4 why I see 5 sars products
      return h("salla-rating-stars", { size: "small", value: filterOption });
    }
    let label = filterOption.value || 'null';
    //label+=filterOption.count ? ` (${salla.helpers.number(filterOption.count)})` : '';
    return h("span", { class: "s-filters-option-name" }, label);
  }
  render() {
    return (h(Host, { class: "s-filters-widget-container" }, h("h3", { class: "s-filters-widget-title", onClick: () => this.toggleWidget() }, h("span", null, this.widgetTitle), h("span", { class: `s-filters-widget-plusminus ${this.isOpen ? 's-filters-widget-plusminus-active' : ''}` })), h("div", { class: "s-filters-widget-content", ref: (el) => this.widgetContent = el }, h("div", { class: "s-filters-widget-values", ref: (el) => this.widgetValues = el }, h("slot", null), this.option.type !== FilterOptionTypes.RANGE
      ? this.renderFilterOption(this.option)
      : h("salla-price-range", { onChanged: (event) => this.changed.emit(event.detail), ref: price => this.priceRange = price, filtersData: this.filtersData, option: this.option })), this.withLoadMore &&
      h("a", { class: "s-filters-widget-more", onClick: () => this.showMore() }, !this.isShowMore ? 'عرض المزيد' : 'عرض أقل'))));
  }
  static get is() { return "salla-filters-widget"; }
  static get originalStyleUrls() {
    return {
      "$": ["salla-filters-widget.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["salla-filters-widget.css"]
    };
  }
  static get properties() {
    return {
      "widgetTitle": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "widget-title",
        "reflect": false
      },
      "withLoadMore": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "with-load-more",
        "reflect": false
      },
      "filtersData": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "object",
          "resolved": "object",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        }
      },
      "option": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "Filter",
          "resolved": "Filter",
          "references": {
            "Filter": {
              "location": "import",
              "path": "../salla-filters/interfaces"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        }
      }
    };
  }
  static get states() {
    return {
      "isOpen": {},
      "isShowMore": {}
    };
  }
  static get events() {
    return [{
        "method": "changed",
        "name": "changed",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "reset": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      },
      "showMore": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      },
      "toggleWidget": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "host"; }
}
//# sourceMappingURL=salla-filters-widget.js.map
