/*!
 * Crafted with ❤ by Salla
 */
import flatpickr from "flatpickr";
import { h } from '@stencil/core';
export class SallaDatetimePicker {
  constructor() {
    this.value = null;
    this.required = undefined;
    this.name = undefined;
    this.placeholder = salla.lang.get('blocks.buy_as_gift.select_send_date_and_time');
    this.allowInput = true;
    this.allowInvalidPreload = false;
    this.altFormat = "F j, Y";
    this.altInput = false;
    this.altInputClass = undefined;
    this.appendTo = undefined;
    this.ariaDateFormat = "F j, Y";
    this.autoFillDefaultTime = true;
    this.clickOpens = true;
    this.closeOnSelect = true;
    this.conjunction = undefined;
    this.dateFormat = "Y-m-d";
    this.defaultDate = undefined;
    this.defaultHour = 12;
    this.defaultMinute = 0;
    this.defaultSeconds = 0;
    this.disable = [];
    this.disableMobile = false;
    this.enable = [(_) => true];
    this.enableSeconds = false;
    this.enableTime = false;
    this.formatDate = undefined;
    this.hourIncrement = 1;
    this.inline = false;
    this.locale = "en";
    this.maxDate = null;
    this.maxTime = null;
    this.minDate = null;
    this.minTime = null;
    this.minuteIncrement = 5;
    this.mode = "single";
    this.monthSelectorType = "dropdown";
    this.nextArrow = '<span class="sicon-keyboard_arrow_right"></span>';
    this.noCalendar = false;
    this.dateParser = undefined;
    this.position = "auto";
    this.positionElement = undefined;
    this.prevArrow = '<span class="sicon-keyboard_arrow_left"></span>';
    this.shorthandCurrentMonth = false;
    this.static = false;
    this.showMonths = 1;
    this.time_24hr = false;
    this.weekNumbers = false;
    this.wrap = false;
  }
  render() {
    return h("div", { class: "s-datetime-picker" }, h("input", { type: "datetime", name: this.name, value: this.value, required: this.required, placeholder: this.placeholder, class: "s-datetime-picker-input", ref: (el) => this.dateInput = el }));
  }
  componentDidLoad() {
    let options = {
      allowInput: this.allowInput,
      allowInvalidPreload: this.allowInvalidPreload,
      altFormat: this.altFormat,
      altInput: this.altInput,
      altInputClass: this.altInputClass,
      appendTo: this.appendTo,
      ariaDateFormat: this.ariaDateFormat,
      autoFillDefaultTime: this.autoFillDefaultTime,
      clickOpens: this.clickOpens,
      closeOnSelect: this.closeOnSelect,
      conjunction: this.conjunction,
      dateFormat: this.dateFormat,
      defaultDate: !!this.value ? Date.parse(this.value) : this.defaultDate,
      defaultHour: this.defaultHour,
      defaultMinute: this.defaultMinute,
      defaultSeconds: this.defaultSeconds,
      disable: this.disable,
      disableMobile: this.disableMobile,
      enable: this.enable,
      enableSeconds: this.enableSeconds,
      enableTime: this.enableTime,
      formatDate: this.formatDate,
      hourIncrement: this.hourIncrement,
      inline: this.inline,
      locale: this.locale,
      maxDate: this.maxDate,
      maxTime: this.maxTime,
      minDate: this.minDate,
      minTime: this.minTime,
      minuteIncrement: this.minuteIncrement,
      mode: this.mode,
      monthSelectorType: this.monthSelectorType,
      nextArrow: this.nextArrow,
      noCalendar: this.noCalendar,
      parseDate: this.dateParser,
      position: this.position,
      positionElement: this.positionElement,
      prevArrow: this.prevArrow,
      shorthandCurrentMonth: this.shorthandCurrentMonth,
      static: this.static,
      showMonths: this.showMonths,
      time_24hr: this.time_24hr,
      weekNumbers: this.weekNumbers,
      wrap: this.wrap,
      // @ts-ignore
      onChange: (selectedDates, dateStr) => this.picked.emit(this.value = dateStr)
      // onOpen: this.handleOnOpen(selectedDates, dateStr, instance)
      // onClose: this.handleOnClose(selectedDates, dateStr, instance)
    };
    flatpickr(this.dateInput, options);
    this.dateInput.addEventListener('invalid', e => {
      this.invalidInput.emit(e);
    });
    this.dateInput.addEventListener('input', () => {
      this.dateInput.setCustomValidity('');
      this.dateInput.reportValidity();
    });
  }
  static get is() { return "salla-datetime-picker"; }
  static get originalStyleUrls() {
    return {
      "$": ["salla-datetime-picker.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["salla-datetime-picker.css"]
    };
  }
  static get properties() {
    return {
      "value": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Two way data binding to retrieve the selected date[time] value"
        },
        "attribute": "value",
        "reflect": true,
        "defaultValue": "null"
      },
      "required": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Whether this input i required or not"
        },
        "attribute": "required",
        "reflect": false
      },
      "name": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "the name for the input"
        },
        "attribute": "name",
        "reflect": true
      },
      "placeholder": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Placeholder text to show on the input element"
        },
        "attribute": "placeholder",
        "reflect": false,
        "defaultValue": "salla.lang.get('blocks.buy_as_gift.select_send_date_and_time')"
      },
      "allowInput": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Allows the user to enter a date directly into the input field. By default, direct entry is disabled."
        },
        "attribute": "allow-input",
        "reflect": false,
        "defaultValue": "true"
      },
      "allowInvalidPreload": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Allows the preloading of an invalid date. When disabled, the field will be cleared if the provided date is invalid"
        },
        "attribute": "allow-invalid-preload",
        "reflect": false,
        "defaultValue": "false"
      },
      "altFormat": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Exactly the same as date format, but for the altInput field."
        },
        "attribute": "alt-format",
        "reflect": false,
        "defaultValue": "\"F j, Y\""
      },
      "altInput": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Show the user a readable date (as per altFormat), but return something totally different to the server."
        },
        "attribute": "alt-input",
        "reflect": false,
        "defaultValue": "false"
      },
      "altInputClass": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "This class will be added to the input element created by the altInput option.\nNote that altInput already inherits classes from the original input."
        },
        "attribute": "alt-input-class",
        "reflect": false
      },
      "appendTo": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "HTMLElement",
          "resolved": "HTMLElement",
          "references": {
            "HTMLElement": {
              "location": "global"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Instead of body, appends the calendar to the specified node instead."
        },
        "defaultValue": "undefined"
      },
      "ariaDateFormat": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Defines how the date will be formatted in the aria-label for calendar days,\nusing the same tokens as dateFormat. If you change this, you should choose a\nvalue that will make sense if a screen reader reads it out loud."
        },
        "attribute": "aria-date-format",
        "reflect": false,
        "defaultValue": "\"F j, Y\""
      },
      "autoFillDefaultTime": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Whether the default time should be auto-filled when the input is empty and gains or loses focus."
        },
        "attribute": "auto-fill-default-time",
        "reflect": false,
        "defaultValue": "true"
      },
      "clickOpens": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Whether clicking on the input should open the picker.\nSet it to false if you only want to open the calendar programmatically with [open()]"
        },
        "attribute": "click-opens",
        "reflect": false,
        "defaultValue": "true"
      },
      "closeOnSelect": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Whether calendar should close after date selection or not"
        },
        "attribute": "close-on-select",
        "reflect": false,
        "defaultValue": "true"
      },
      "conjunction": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "When in \"multiple\" mode, conjunction is used to separate dates in the entry field."
        },
        "attribute": "conjunction",
        "reflect": false
      },
      "dateFormat": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "A string of characters which are used to define how the date will be displayed in the input box.\nThe supported characters are defined in the table below."
        },
        "attribute": "date-format",
        "reflect": false,
        "defaultValue": "\"Y-m-d\""
      },
      "defaultDate": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "DateOption | DateOption[]",
          "resolved": "Date | DateOption[] | number | string",
          "references": {
            "DateOption": {
              "location": "import",
              "path": "./interfaces"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Sets the initial selected date(s). If you're using mode: \"multiple\" or a range calendar supply an\nArray of Date objects or an Array of date strings which follow your dateFormat. Otherwise, you can supply\na single Date object or a date string."
        },
        "attribute": "default-date",
        "reflect": false
      },
      "defaultHour": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Initial value of the hour element, when no date is selected"
        },
        "attribute": "default-hour",
        "reflect": false,
        "defaultValue": "12"
      },
      "defaultMinute": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Initial value of the minute element, when no date is selected"
        },
        "attribute": "default-minute",
        "reflect": false,
        "defaultValue": "0"
      },
      "defaultSeconds": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Initial value of the seconds element, when no date is selected"
        },
        "attribute": "default-seconds",
        "reflect": false,
        "defaultValue": "0"
      },
      "disable": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "DateLimit<DateOption>[]",
          "resolved": "DateLimit<DateOption>[]",
          "references": {
            "DateLimit": {
              "location": "import",
              "path": "./interfaces"
            },
            "DateOption": {
              "location": "import",
              "path": "./interfaces"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Disables certain dates, preventing them from being selected.\nSee https://chmln.github.io/flatpickr/examples/#disabling-specific-dates"
        },
        "defaultValue": "[]"
      },
      "disableMobile": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Set this to true to always use the non-native picker on mobile devices.\nBy default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used."
        },
        "attribute": "disable-mobile",
        "reflect": false,
        "defaultValue": "false"
      },
      "enable": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "DateLimit<DateOption>[]",
          "resolved": "DateLimit<DateOption>[]",
          "references": {
            "DateLimit": {
              "location": "import",
              "path": "./interfaces"
            },
            "DateOption": {
              "location": "import",
              "path": "./interfaces"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Disables all dates except these specified. See https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few"
        },
        "defaultValue": "[(_) => true]"
      },
      "enableSeconds": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Enables seconds selection in the time picker."
        },
        "attribute": "enable-seconds",
        "reflect": false,
        "defaultValue": "false"
      },
      "enableTime": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Enables the time picker"
        },
        "attribute": "enable-time",
        "reflect": false,
        "defaultValue": "false"
      },
      "formatDate": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "(date: Date, format: string, locale: Object) => string",
          "resolved": "(date: Date, format: string, locale: Object) => string",
          "references": {
            "Date": {
              "location": "global"
            },
            "Object": {
              "location": "global"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Allows using a custom date formatting function instead of the built-in handling for date formats using dateFormat, altFormat, etc."
        }
      },
      "hourIncrement": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Adjusts the step for the hour input (incl. scrolling)"
        },
        "attribute": "hour-increment",
        "reflect": false,
        "defaultValue": "1"
      },
      "inline": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Displays the calendar inline"
        },
        "attribute": "inline",
        "reflect": false,
        "defaultValue": "false"
      },
      "locale": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "LocaleKey",
          "resolved": "\"at\" | \"default\" | \"hr\" | \"th\" | \"tr\" | \"id\" | \"is\" | \"cy\" | \"no\" | \"es\" | \"ar\" | \"az\" | \"be\" | \"bg\" | \"bn\" | \"bs\" | \"ca\" | \"cat\" | \"ckb\" | \"cs\" | \"da\" | \"de\" | \"en\" | \"eo\" | \"et\" | \"fa\" | \"fi\" | \"fo\" | \"fr\" | \"gr\" | \"he\" | \"hi\" | \"hu\" | \"hy\" | \"it\" | \"ja\" | \"ka\" | \"ko\" | \"km\" | \"kz\" | \"lt\" | \"lv\" | \"mk\" | \"mn\" | \"ms\" | \"my\" | \"nl\" | \"nn\" | \"pa\" | \"pl\" | \"pt\" | \"ro\" | \"ru\" | \"si\" | \"sk\" | \"sl\" | \"sq\" | \"sr\" | \"sv\" | \"uk\" | \"vn\" | \"zh\" | \"uz\" | \"uz_latn\" | \"zh_tw\"",
          "references": {
            "LocaleKey": {
              "location": "import",
              "path": "./interfaces"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The locale, either as a string (e.g. \"ar\", \"en\") or as an object.\nSee https://chmln.github.io/flatpickr/localization/"
        },
        "attribute": "locale",
        "reflect": false,
        "defaultValue": "\"en\""
      },
      "maxDate": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "DateOption",
          "resolved": "Date | number | string",
          "references": {
            "DateOption": {
              "location": "import",
              "path": "./interfaces"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The maximum date that a user can pick to (inclusive)."
        },
        "attribute": "max-date",
        "reflect": false,
        "defaultValue": "null"
      },
      "maxTime": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "DateOption",
          "resolved": "Date | number | string",
          "references": {
            "DateOption": {
              "location": "import",
              "path": "./interfaces"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The minimum date that a user can start picking from (inclusive)."
        },
        "attribute": "max-time",
        "reflect": false,
        "defaultValue": "null"
      },
      "minDate": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "DateOption",
          "resolved": "Date | number | string",
          "references": {
            "DateOption": {
              "location": "import",
              "path": "./interfaces"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The minimum date that a user can start picking from (inclusive)."
        },
        "attribute": "min-date",
        "reflect": false,
        "defaultValue": "null"
      },
      "minTime": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "DateOption",
          "resolved": "Date | number | string",
          "references": {
            "DateOption": {
              "location": "import",
              "path": "./interfaces"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The minimum time that a user can start picking from (inclusive)."
        },
        "attribute": "min-time",
        "reflect": false,
        "defaultValue": "null"
      },
      "minuteIncrement": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Adjusts the step for the minute input (incl. scrolling) Defaults to 5"
        },
        "attribute": "minute-increment",
        "reflect": false,
        "defaultValue": "5"
      },
      "mode": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"single\" | \"multiple\" | \"range\" | \"time\"",
          "resolved": "\"multiple\" | \"range\" | \"single\" | \"time\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Date selection mode, defaults to \"single\""
        },
        "attribute": "mode",
        "reflect": false,
        "defaultValue": "\"single\""
      },
      "monthSelectorType": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"dropdown\" | \"static\"",
          "resolved": "\"dropdown\" | \"static\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "How the month should be displayed in the header of the calendar.\nIf showMonths has a value greater than 1, the month is always shown as static."
        },
        "attribute": "month-selector-type",
        "reflect": false,
        "defaultValue": "\"dropdown\""
      },
      "nextArrow": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "HTML for the arrow icon, used to switch months."
        },
        "attribute": "next-arrow",
        "reflect": false,
        "defaultValue": "'<span class=\"sicon-keyboard_arrow_right\"></span>'"
      },
      "noCalendar": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Hides the day selection in calendar. Use it along with enableTime to create a time picker."
        },
        "attribute": "no-calendar",
        "reflect": false,
        "defaultValue": "false"
      },
      "dateParser": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "(date: string, format: string) => Date",
          "resolved": "(date: string, format: string) => Date",
          "references": {
            "Date": {
              "location": "global"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "A custom datestring parser"
        }
      },
      "position": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"auto\" | \"above\" | \"below\" | \"auto left\" | \"auto center\" | \"auto right\" | \"above left\" | \"above center\" | \"above right\" | \"below left\" | \"below center\" | \"below right\" | ((self: any, customElement: HTMLElement | undefined) => void)",
          "resolved": "\"above center\" | \"above left\" | \"above right\" | \"above\" | \"auto center\" | \"auto left\" | \"auto right\" | \"auto\" | \"below center\" | \"below left\" | \"below right\" | \"below\" | ((self: any, customElement: HTMLElement) => void)",
          "references": {
            "HTMLElement": {
              "location": "global"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "How the calendar should be positioned with regards to the input. Defaults to \"auto\""
        },
        "attribute": "position",
        "reflect": false,
        "defaultValue": "\"auto\""
      },
      "positionElement": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "HTMLElement",
          "resolved": "HTMLElement",
          "references": {
            "HTMLElement": {
              "location": "global"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The element off of which the calendar will be positioned. Defaults to the date input"
        }
      },
      "prevArrow": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "HTML for the left arrow icon, used to switch months."
        },
        "attribute": "prev-arrow",
        "reflect": false,
        "defaultValue": "'<span class=\"sicon-keyboard_arrow_left\"></span>'"
      },
      "shorthandCurrentMonth": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Whether to display the current month name in shorthand mode, e.g. \"Sep\" instead \"September\""
        },
        "attribute": "shorthand-current-month",
        "reflect": false,
        "defaultValue": "false"
      },
      "static": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Position the calendar inside the wrapper and next to the input element*."
        },
        "attribute": "static",
        "reflect": false,
        "defaultValue": "false"
      },
      "showMonths": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The number of months to be shown at the same time when displaying the calendar."
        },
        "attribute": "show-months",
        "reflect": false,
        "defaultValue": "1"
      },
      "time_24hr": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Displays time picker in 24 hour mode without AM/PM selection when enabled."
        },
        "attribute": "time_-2-4hr",
        "reflect": false,
        "defaultValue": "false"
      },
      "weekNumbers": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Enables display of week numbers in calendar."
        },
        "attribute": "week-numbers",
        "reflect": false,
        "defaultValue": "false"
      },
      "wrap": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "See https://chmln.github.io/flatpickr/examples/#flatpickr-external-elements"
        },
        "attribute": "wrap",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get events() {
    return [{
        "method": "picked",
        "name": "picked",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Event emitted when the date input gets changed by the user when selecting file(s)."
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }, {
        "method": "invalidInput",
        "name": "invalidInput",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Event emitted when the input is invalid."
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }];
  }
}
//# sourceMappingURL=salla-datetime-picker.js.map
