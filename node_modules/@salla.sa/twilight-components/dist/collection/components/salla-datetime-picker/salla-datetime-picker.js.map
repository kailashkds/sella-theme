{"version":3,"file":"salla-datetime-picker.js","sourceRoot":"","sources":["../../../src/components/salla-datetime-picker/salla-datetime-picker.tsx"],"names":[],"mappings":"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":["import flatpickr from \"flatpickr\";\nimport {Component, h, Prop, Event, EventEmitter} from '@stencil/core';\n\nimport {DateOption, LocaleKey, DateLimit} from './interfaces';\n\n@Component({\n  tag: 'salla-datetime-picker',\n  styleUrl: 'salla-datetime-picker.scss',\n})\nexport class SallaDatetimePicker {\n\n  dateInput: HTMLInputElement;\n  /**\n   * Two way data binding to retrieve the selected date[time] value\n   */\n  @Prop({reflect: true, mutable: true}) value: string = null;\n\n  /**\n   * Whether this input i required or not\n   */\n  @Prop() required: boolean;\n  /**\n   * the name for the input\n   */\n  @Prop({reflect: true}) name: string;\n  /**\n   * Placeholder text to show on the input element\n   */\n  @Prop() placeholder: string = salla.lang.get('blocks.buy_as_gift.select_send_date_and_time')\n\n  /**\n   * Allows the user to enter a date directly into the input field. By default, direct entry is disabled.\n   */\n  @Prop() allowInput: boolean = true;\n\n  /**\n   * Allows the preloading of an invalid date. When disabled, the field will be cleared if the provided date is invalid\n   */\n  @Prop() allowInvalidPreload: boolean = false;\n\n  /**\n   * Exactly the same as date format, but for the altInput field.\n   */\n  @Prop() altFormat: string = \"F j, Y\";\n\n  /**\n   * Show the user a readable date (as per altFormat), but return something totally different to the server.\n   */\n  @Prop() altInput: boolean = false;\n\n  /**\n   * This class will be added to the input element created by the altInput option.\n   * Note that altInput already inherits classes from the original input.\n   */\n  @Prop() altInputClass: string;\n\n  /**\n   * Instead of body, appends the calendar to the specified node instead.\n   */\n  @Prop() appendTo: HTMLElement = undefined;\n\n  /**\n   * Defines how the date will be formatted in the aria-label for calendar days,\n   * using the same tokens as dateFormat. If you change this, you should choose a\n   * value that will make sense if a screen reader reads it out loud.\n   */\n  @Prop() ariaDateFormat: string = \"F j, Y\";\n\n  /**\n   * Whether the default time should be auto-filled when the input is empty and gains or loses focus.\n   */\n  @Prop() autoFillDefaultTime: boolean = true;\n\n  /**\n   * Whether clicking on the input should open the picker.\n   * Set it to false if you only want to open the calendar programmatically with [open()]\n   */\n  @Prop() clickOpens: boolean = true;\n\n  /**\n   * Whether calendar should close after date selection or not\n   */\n  @Prop() closeOnSelect: boolean = true;\n\n  /**\n   * When in \"multiple\" mode, conjunction is used to separate dates in the entry field.\n   */\n  @Prop() conjunction?: string;\n\n  /**\n   * A string of characters which are used to define how the date will be displayed in the input box.\n   * The supported characters are defined in the table below.\n   */\n  @Prop() dateFormat: string = \"Y-m-d\";\n\n  /**\n   * Sets the initial selected date(s). If you're using mode: \"multiple\" or a range calendar supply an\n   * Array of Date objects or an Array of date strings which follow your dateFormat. Otherwise, you can supply\n   * a single Date object or a date string.\n   */\n  @Prop() defaultDate: DateOption | DateOption[];\n\n  /**\n   * Initial value of the hour element, when no date is selected\n   */\n  @Prop() defaultHour: number = 12;\n\n\n  /**\n   * Initial value of the minute element, when no date is selected\n   */\n  @Prop() defaultMinute: number = 0;\n\n  /**\n   * Initial value of the seconds element, when no date is selected\n   */\n  @Prop() defaultSeconds: number = 0;\n\n  /**\n   * Disables certain dates, preventing them from being selected.\n   * See https://chmln.github.io/flatpickr/examples/#disabling-specific-dates\n   */\n  @Prop() disable: DateLimit<DateOption>[] = [];\n\n  /**\n   * Set this to true to always use the non-native picker on mobile devices.\n   * By default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.\n   */\n  @Prop() disableMobile: boolean = false;\n\n  /**\n   * Disables all dates except these specified. See https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few\n   */\n  @Prop() enable: DateLimit<DateOption>[] = [(_) => true];\n\n  /**\n   * Enables seconds selection in the time picker.\n   */\n  @Prop() enableSeconds: boolean = false;\n\n  /**\n   * Enables the time picker\n   */\n  @Prop() enableTime: boolean = false;\n\n  /**\n   * Allows using a custom date formatting function instead of the built-in handling for date formats using dateFormat, altFormat, etc.\n   */\n  @Prop() formatDate: (date: Date, format: string, locale: Object) => string;\n\n  /**\n   * Adjusts the step for the hour input (incl. scrolling)\n   */\n  @Prop() hourIncrement: number = 1;\n\n  /**\n   * Displays the calendar inline\n   */\n  @Prop() inline: boolean = false;\n\n  /**\n   * The locale, either as a string (e.g. \"ar\", \"en\") or as an object.\n   * See https://chmln.github.io/flatpickr/localization/\n   */\n  @Prop() locale: LocaleKey = \"en\";\n\n  /**\n   * The maximum date that a user can pick to (inclusive).\n   */\n  @Prop() maxDate: DateOption = null;\n\n  /**\n   * The minimum date that a user can start picking from (inclusive).\n   */\n  @Prop() maxTime: DateOption = null;\n\n  /**\n   * The minimum date that a user can start picking from (inclusive).\n   */\n  @Prop() minDate: DateOption = null;\n\n  /**\n   * The minimum time that a user can start picking from (inclusive).\n   */\n  @Prop() minTime: DateOption = null;\n\n  /**\n   * Adjusts the step for the minute input (incl. scrolling) Defaults to 5\n   */\n  @Prop() minuteIncrement: number = 5;\n\n  /**\n   * Date selection mode, defaults to \"single\"\n   */\n  @Prop() mode: \"single\" | \"multiple\" | \"range\" | \"time\" = \"single\";\n\n  /**\n   * How the month should be displayed in the header of the calendar.\n   * If showMonths has a value greater than 1, the month is always shown as static.\n   */\n  @Prop() monthSelectorType: \"dropdown\" | \"static\" = \"dropdown\";\n\n  /**\n   * HTML for the arrow icon, used to switch months.\n   */\n  @Prop() nextArrow: string = '<span class=\"sicon-keyboard_arrow_right\"></span>';\n\n  /**\n   * Hides the day selection in calendar. Use it along with enableTime to create a time picker.\n   */\n  @Prop() noCalendar: boolean = false;\n\n  /**\n   * A custom datestring parser\n   */\n  @Prop() dateParser: (date: string, format: string) => Date;\n\n  /**\n   * How the calendar should be positioned with regards to the input. Defaults to \"auto\"\n   */\n  @Prop() position: \"auto\" | \"above\" | \"below\" | \"auto left\" | \"auto center\" | \"auto right\" | \"above left\" | \"above center\" | \"above right\" | \"below left\" | \"below center\" | \"below right\" | ((self: any, customElement: HTMLElement | undefined) => void) = \"auto\";\n\n  /**\n   *  The element off of which the calendar will be positioned. Defaults to the date input\n   */\n  @Prop() positionElement: HTMLElement;\n\n  /**\n   * HTML for the left arrow icon, used to switch months.\n   */\n  @Prop() prevArrow: string = '<span class=\"sicon-keyboard_arrow_left\"></span>';\n\n  /**\n   * Whether to display the current month name in shorthand mode, e.g. \"Sep\" instead \"September\"\n   */\n  @Prop() shorthandCurrentMonth: boolean = false;\n\n  /**\n   * Position the calendar inside the wrapper and next to the input element*.\n   */\n  @Prop() static: boolean = false;\n\n  /**\n   * The number of months to be shown at the same time when displaying the calendar.\n   */\n  @Prop() showMonths: number = 1;\n\n  /**\n   * Displays time picker in 24 hour mode without AM/PM selection when enabled.\n   */\n  @Prop() time_24hr: boolean = false;\n\n  /**\n   * Enables display of week numbers in calendar.\n   */\n  @Prop() weekNumbers: boolean = false;\n\n  /**\n   * See https://chmln.github.io/flatpickr/examples/#flatpickr-external-elements\n   */\n  @Prop() wrap: boolean = false;\n\n\n  /**\n   * Event emitted when the date input gets changed by the user when selecting file(s).\n   */\n  @Event() picked: EventEmitter<any>;\n  \n  /**\n   * Event emitted when the input is invalid.\n   */\n  @Event() invalidInput: EventEmitter<any>;\n\n  render() {\n    return <div class=\"s-datetime-picker\">\n      <input type=\"datetime\" name={this.name} value={this.value} required={this.required}\n             placeholder={this.placeholder}\n             class=\"s-datetime-picker-input\" ref={(el) => this.dateInput = el as HTMLInputElement}/>\n    </div>;\n  }\n\n  componentDidLoad() {\n    let options = {\n      allowInput: this.allowInput,\n      allowInvalidPreload: this.allowInvalidPreload,\n      altFormat: this.altFormat,\n      altInput: this.altInput,\n      altInputClass: this.altInputClass,\n      appendTo: this.appendTo,\n      ariaDateFormat: this.ariaDateFormat,\n      autoFillDefaultTime: this.autoFillDefaultTime,\n      clickOpens: this.clickOpens,\n      closeOnSelect: this.closeOnSelect,\n      conjunction: this.conjunction,\n      dateFormat: this.dateFormat,\n      defaultDate: !!this.value ? Date.parse(this.value) : this.defaultDate,\n      defaultHour: this.defaultHour,\n      defaultMinute: this.defaultMinute,\n      defaultSeconds: this.defaultSeconds,\n      disable: this.disable,\n      disableMobile: this.disableMobile,\n      enable: this.enable,\n      enableSeconds: this.enableSeconds,\n      enableTime: this.enableTime,\n      formatDate: this.formatDate,\n      hourIncrement: this.hourIncrement,\n      inline: this.inline,\n      locale: this.locale,\n      maxDate: this.maxDate,\n      maxTime: this.maxTime,\n      minDate: this.minDate,\n      minTime: this.minTime,\n      minuteIncrement: this.minuteIncrement,\n      mode: this.mode,\n      monthSelectorType: this.monthSelectorType,\n      nextArrow: this.nextArrow,\n      noCalendar: this.noCalendar,\n      parseDate: this.dateParser,\n      position: this.position,\n      positionElement: this.positionElement,\n      prevArrow: this.prevArrow,\n      shorthandCurrentMonth: this.shorthandCurrentMonth,\n      static: this.static,\n      showMonths: this.showMonths,\n      time_24hr: this.time_24hr,\n      weekNumbers: this.weekNumbers,\n      wrap: this.wrap,\n      // @ts-ignore\n      onChange: (selectedDates, dateStr) => this.picked.emit(this.value = dateStr)\n      // onOpen: this.handleOnOpen(selectedDates, dateStr, instance)\n      // onClose: this.handleOnClose(selectedDates, dateStr, instance)\n    }\n\n    flatpickr(this.dateInput, options);\n    this.dateInput.addEventListener('invalid', e => {\n      this.invalidInput.emit(e);\n    });\n    this.dateInput.addEventListener('input', () => {\n      this.dateInput.setCustomValidity('');\n      this.dateInput.reportValidity();\n    });\n  }\n}\n"]}