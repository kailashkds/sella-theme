/*!
 * Crafted with ‚ù§ by Salla
 */
import { h, Host } from '@stencil/core';
export class SallaButton {
  constructor() {
    this.hostAttributes = {};
    this.shape = 'btn';
    this.color = 'primary';
    this.fill = 'solid';
    this.size = 'medium';
    this.width = 'normal';
    this.loading = false;
    this.disabled = false;
    this.loaderPosition = 'after';
    this.href = undefined;
  }
  /**
   * Run loading animation
   */
  async load() {
    if (this.loaderPosition == 'center')
      this.text.classList.add('s-button-hide');
    this.host.setAttribute('loading', '');
    return this.host;
  }
  /**
   * Stop loading animation
   */
  async stop() {
    this.host.removeAttribute('loading');
    this.host.querySelector('button').removeAttribute('loading');
    if (this.loaderPosition == 'center')
      this.text.classList.remove('s-button-hide');
    return this.host;
  }
  /**
   * Changing the body of the button
   * @param html
   */
  async setText(html) {
    this.text.innerHTML = html;
    return this.host;
  }
  /**
   * Add `disabled` attribute
   */
  async disable() {
    this.host.setAttribute('disabled', '');
    return this.host;
  }
  /**
   * Remove `disabled` attribute
   */
  async enable() {
    this.host.removeAttribute('disabled');
    return this.host;
  }
  getBtnAttributes() {
    for (let i = 0; i < this.host.attributes.length; i++) {
      if (!['color', 'fill', 'size', 'width', 'id'].includes(this.host.attributes[i].name)) {
        this.hostAttributes[this.host.attributes[i].name] = this.host.attributes[i].value;
      }
    }
    this.hostAttributes.type = this.hostAttributes.type || 'button';
    this.hostAttributes.class +=
      ' s-button-element s-button-' + this.shape
        + ' s-button-' + (this.fill == "none" ? 'fill-none' : this.fill)
        + (this.size != "medium" ? ' s-button-' + this.size : '')
        + (this.width != "normal" ? ' s-button-' + this.width : '')
        + (this.shape == "link" ? ' s-button-' + this.color + '-link' : '')
        + (this.shape != "link" && this.fill != 'outline' ? ' s-button-' + this.color : '')
        + (this.fill == 'outline' ? ' s-button-' + this.color + '-outline' : '')
        + (this.disabled ? ' s-button-disabled ' : '')
        + (this.shape == 'icon' ? ' s-button-loader-center' : ' s-button-loader-' + this.loaderPosition);
    return this.hostAttributes;
  }
  button() {
    return (h("button", Object.assign({}, this.getBtnAttributes(), { disabled: this.disabled }), h("span", { class: "s-button-text", ref: el => this.text = el }, h("slot", null)), this.loading ? h("span", { class: "s-button-loader" }) : ''));
  }
  render() {
    var _a;
    //TODO:: find a better fix, this is a patch for issue that duplicates the buttons twice @see the screenshot inside this folder
    return ((_a = this.host.closest('.swiper-slide')) === null || _a === void 0 ? void 0 : _a.classList.contains('swiper-slide-duplicate'))
      ? ''
      : (h(Host, { class: "s-button-wrap" }, this.href ? h("a", { href: this.href }, this.button()) : this.button()));
  }
  static get is() { return "salla-button"; }
  static get originalStyleUrls() {
    return {
      "$": ["salla-button.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["salla-button.css"]
    };
  }
  static get properties() {
    return {
      "shape": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'link' | 'icon' | 'btn'",
          "resolved": "\"btn\" | \"icon\" | \"link\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Button Type"
        },
        "attribute": "shape",
        "reflect": true,
        "defaultValue": "'btn'"
      },
      "color": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'primary' | 'success' | 'warning' | 'danger' | 'light' | 'gray' | 'dark'",
          "resolved": "\"danger\" | \"dark\" | \"gray\" | \"light\" | \"primary\" | \"success\" | \"warning\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Button Color"
        },
        "attribute": "color",
        "reflect": true,
        "defaultValue": "'primary'"
      },
      "fill": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'solid' | 'outline' | 'none'",
          "resolved": "\"none\" | \"outline\" | \"solid\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Button Fill"
        },
        "attribute": "fill",
        "reflect": true,
        "defaultValue": "'solid'"
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'small' | 'large' | 'medium'",
          "resolved": "\"large\" | \"medium\" | \"small\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Button Size"
        },
        "attribute": "size",
        "reflect": true,
        "defaultValue": "'medium'"
      },
      "width": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'wide' | 'normal'",
          "resolved": "\"normal\" | \"wide\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Button Width"
        },
        "attribute": "width",
        "reflect": true,
        "defaultValue": "'normal'"
      },
      "loading": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Is the button currently loading"
        },
        "attribute": "loading",
        "reflect": true,
        "defaultValue": "false"
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Is the button currently disabled"
        },
        "attribute": "disabled",
        "reflect": true,
        "defaultValue": "false"
      },
      "loaderPosition": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "'start' | 'end' | 'center' | 'after'",
          "resolved": "\"after\" | \"center\" | \"end\" | \"start\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If there is need to change loader position, pass the position"
        },
        "attribute": "loader-position",
        "reflect": false,
        "defaultValue": "'after'"
      },
      "href": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Button with href as normal link"
        },
        "attribute": "href",
        "reflect": false
      }
    };
  }
  static get methods() {
    return {
      "load": {
        "complexType": {
          "signature": "() => Promise<HTMLElement>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            },
            "HTMLElement": {
              "location": "global"
            }
          },
          "return": "Promise<HTMLElement>"
        },
        "docs": {
          "text": "Run loading animation",
          "tags": []
        }
      },
      "stop": {
        "complexType": {
          "signature": "() => Promise<HTMLElement>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            },
            "HTMLElement": {
              "location": "global"
            }
          },
          "return": "Promise<HTMLElement>"
        },
        "docs": {
          "text": "Stop loading animation",
          "tags": []
        }
      },
      "setText": {
        "complexType": {
          "signature": "(html: string) => Promise<HTMLElement>",
          "parameters": [{
              "tags": [{
                  "name": "param",
                  "text": "html"
                }],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            },
            "HTMLElement": {
              "location": "global"
            }
          },
          "return": "Promise<HTMLElement>"
        },
        "docs": {
          "text": "Changing the body of the button",
          "tags": [{
              "name": "param",
              "text": "html"
            }]
        }
      },
      "disable": {
        "complexType": {
          "signature": "() => Promise<HTMLElement>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            },
            "HTMLElement": {
              "location": "global"
            }
          },
          "return": "Promise<HTMLElement>"
        },
        "docs": {
          "text": "Add `disabled` attribute",
          "tags": []
        }
      },
      "enable": {
        "complexType": {
          "signature": "() => Promise<HTMLElement>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            },
            "HTMLElement": {
              "location": "global"
            }
          },
          "return": "Promise<HTMLElement>"
        },
        "docs": {
          "text": "Remove `disabled` attribute",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "host"; }
}
//# sourceMappingURL=salla-button.js.map
