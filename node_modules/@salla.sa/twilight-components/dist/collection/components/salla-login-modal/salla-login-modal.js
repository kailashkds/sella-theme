/*!
 * Crafted with ❤ by Salla
 */
import { h } from '@stencil/core';
import UserIcon from "../../assets/svg/user.svg";
import PhoneIcon from "../../assets/svg/phone.svg";
import EmailIcon from "../../assets/svg/mail.svg";
import CameraIcon from '../../assets/svg/camera.svg';
import KeyboardArrowRightIcon from "../../assets/svg/keyboard_arrow_right.svg";
import ArrowRightIcon from "../../assets/svg/arrow-right.svg";
import Helper from '../../Helpers/Helper';
import { CustomFieldType } from './intefaces';
/**
 * @slot footer - The footer of modal
 * @slot before-login-type - placeholder position
 * @slot after-login-type - placeholder position
 * @slot before-login-mobile - placeholder position
 * @slot after-login-mobile - placeholder position
 * @slot before-login-email - placeholder position
 * @slot after-login-email - placeholder position
 * @slot before-registration - placeholder position
 * @slot after-registration - placeholder position
 */
export class SallaLoginModal {
  constructor() {
    this.customFieldsValues = {};
    this.typing = (e, submitMethod = null) => {
      const error = e.target.nextElementSibling;
      e.target.classList.remove('s-has-error');
      (error === null || error === void 0 ? void 0 : error.classList.contains('s-login-modal-error-message')) && (error.innerText = '');
      //it was sending two requests for send two verification requests
      submitMethod && e.key == 'Enter' && submitMethod();
    };
    this.loginBySMS = async (event = null) => {
      event === null || event === void 0 ? void 0 : event.preventDefault();
      const { phone, countryCode } = await this.loginTelInput.getValues();
      const isPhoneValid = await this.loginTelInput.isValid();
      if (!isPhoneValid) {
        return;
      }
      this.login(this.smsBtn, { type: 'mobile', phone: phone, country_code: countryCode });
      return false;
    };
    this.loginByEmail = (event = null) => {
      event === null || event === void 0 ? void 0 : event.preventDefault();
      if (!Helper.isValidEmail(this.loginEmail.value)) {
        this.validateField(this.loginEmail, this.emailErrorMsg);
        return;
      }
      this.login(this.emailBtn, { type: 'email', email: this.loginEmail.value });
    };
    this.newUser = async () => {
      var _a;
      const { phone: regPhone, countryCode } = this.regType == "email" ? await this.regTelInput.getValues() : await this.loginTelInput.getValues(), emailValue = this.regEmail.value || ((_a = this.loginEmail) === null || _a === void 0 ? void 0 : _a.value);
      await this.newUserValidation();
      await this.regBtn.load();
      await this.regBtn.disable();
      let data = {
        first_name: this.firstName.value,
        last_name: this.lastName.value,
        phone: regPhone || this.loginTelInput.phone,
        country_code: countryCode,
        verified_by: this.regType,
        custom_fields: this.customFieldsValues,
      };
      emailValue && (data = Object.assign(Object.assign({}, data), { email: emailValue }));
      this.verifyTab.getCode()
        .then(code => salla.auth.api.register(Object.assign(Object.assign({}, data), { code })))
        .then(() => salla.auth.canRedirect && window.location.reload())
        .catch((error) => {
        salla.logger.error(error);
        this.regBtn.stop() && this.regBtn.enable();
      });
    };
    this.isEmailAllowed = undefined;
    this.isMobileAllowed = true;
    this.isEmailRequired = false;
    this.supportWebAuth = true;
    this.currentTabName = 'home';
    this.regType = 'phone';
    this.translationLoaded = false;
    this.title = undefined;
    this.emailErrorMsg = undefined;
    this.firstNameErrorMsg = undefined;
    this.lastNameErrorMsg = undefined;
    this.dragAndDrop = salla.lang.get('common.uploader.drag_and_drop');
    this.browseFromFiles = salla.lang.get('common.uploader.browse');
    this.customFields = [];
    this.uploadedImage = undefined;
    this.title = this.host.title || salla.lang.get('blocks.header.login');
    this.host.removeAttribute('title');
    this.emailErrorMsg = salla.lang.get('common.elements.email_is_valid');
    this.firstNameErrorMsg = salla.lang.get('common.errors.field_required', { attribute: salla.lang.get('pages.profile.first_name') });
    this.lastNameErrorMsg = salla.lang.get('common.errors.field_required', { attribute: salla.lang.get('pages.profile.last_name') });
    salla.lang.onLoaded(() => {
      this.translationLoaded = true;
      this.title = salla.lang.get('blocks.header.login');
      this.dragAndDrop = salla.lang.get('common.uploader.drag_and_drop');
      this.browseFromFiles = salla.lang.get('common.uploader.browse');
      this.updateTranslations();
    });
    salla.event.on('login::open', (event) => this.open(event));
    salla.onReady(() => {
      this.isEmailAllowed = salla.config.get('store.settings.auth.email_allowed', this.isEmailAllowed);
      this.isMobileAllowed = salla.config.get('store.settings.auth.mobile_allowed', this.isMobileAllowed);
      this.isEmailRequired = salla.config.get('store.settings.auth.is_email_required', this.isEmailRequired);
    });
  }
  /**
   * @param {CustomEvent|{details:{case:'new_customer'|'authenticated', redirect_url:string|null}}} event
   */
  onVerified(event) {
    var _a, _b, _c, _d;
    salla.log('verified', event);
    //there is a case when force login is activated & is new user, it will return case inside error key., so cover it.
    let verifyCase = ((_a = event.detail) === null || _a === void 0 ? void 0 : _a.data.case) || ((_b = event.detail) === null || _b === void 0 ? void 0 : _b.error.case);
    if (!verifyCase) {
      salla.log('verified but without case!');
      return;
    }
    if (verifyCase === "new_customer") {
      this.customFields = ((_d = (_c = event.detail) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.custom_fields) || [];
      return this.showTab(this.registrationTab);
    }
    if (!salla.auth.canRedirect()) {
      salla.log('Will not auto redirect or reload, due to `salla.auth.canRedirect()`');
      this.modal.close();
      return;
    }
    if (event.detail.data.redirect_url) {
      return window.location.href = event.detail.data.redirect_url;
    }
    /**
     * we don't want to reload the page if this is not web auth
     * because we'll need the token in the page itself and its there
     * todo :: store the user data in storage for non-web auth and set the config.user from it
     */
    if (this.supportWebAuth) {
      window.location.reload();
    }
    else {
      this.modal.close();
    }
  }
  updateTranslations() {
    var _a;
    this.emailErrorMsg = salla.lang.get('common.elements.email_is_valid');
    this.firstNameErrorMsg = salla.lang.get('common.errors.field_required', { attribute: salla.lang.get('pages.profile.first_name') });
    this.lastNameErrorMsg = salla.lang.get('common.errors.field_required', { attribute: salla.lang.get('pages.profile.last_name') });
    (_a = this.modal) === null || _a === void 0 ? void 0 : _a.setTitle(this.title);
  }
  /**
   * Open login component
   */
  // @ts-ignore
  async open(event = null) {
    // todo :: support change the settings from event details
    // if(event && event.hasOwnProperty('isEmailAllowed')){
    //   this.isEmailAllowed = event?.isEmailAllowed;
    // }
    //
    // if(event && event.hasOwnProperty('isMobileAllowed')){
    //   this.isMobileAllowed = event?.isMobileAllowed;
    // }
    if (this.isEmailAllowed && this.isMobileAllowed) {
      this.showTab(this.homeTab);
    }
    else if (this.isEmailAllowed) {
      this.showTab(this.emailTab);
    }
    else if (this.isMobileAllowed) {
      this.showTab(this.mobileTab);
    }
    return this.modal.open();
  }
  showTab(tab, evt) {
    var _a;
    evt === null || evt === void 0 ? void 0 : evt.preventDefault();
    this.currentTabName = tab.getAttribute('data-name');
    // todo:: use better way for resize the modal
    // setTimeout(() => this.modal.querySelector('.s-login-modal-wrapper')?.setAttribute('style', 'height:' + tab?.scrollHeight + 'px'));
    if ([this.mobileTab, this.emailTab].includes(tab)) {
      this.regType = tab === this.mobileTab ? 'phone' : 'email';
    }
    const input = tab.querySelector('input[type="tel"], input[type="email"]');
    input && setTimeout(() => {
      input.focus();
    }, 100);
    (_a = this.modal) === null || _a === void 0 ? void 0 : _a.setTitle(this.currentTabName === 'registration' ? salla.lang.get('common.titles.registration') : this.title);
    return this;
  }
  login(btn, data) {
    btn.load()
      .then(() => btn.disable())
      .then(() => salla.auth.api.login(data))
      .then(() => this.showTab(this.verifyTab))
      .then(() => this.verifyTab.open(data))
      .finally(() => btn.stop() && btn.enable());
  }
  async newUserValidation() {
    const isLogByPhone = this.regType == "phone", isLogByEmail = this.regType == "email", emailValue = this.regEmail.value || (isLogByEmail && this.loginEmail.value), isEmailValid = Helper.isValidEmail(emailValue), isFirstNameValid = this.firstName.value.length > 0, isLastNameValid = this.lastName.value.length > 0, isPhoneValid = await this.regTelInput.isValid() || isLogByPhone && await this.loginTelInput.isValid(), emailValidation = (emailValue && isEmailValid) || (!emailValue && !this.isEmailRequired);
    // Custom Fields Validation
    var isCustomFieldValid = true;
    //we should make sure that there is text nodes between children
    this.customFieldsWrapper.childNodes
      .forEach((field) => {
      this.customFieldsValues[field.id] = field['value'];
      if (!field.required || this.customFieldsValues[field.id].length) {
        return;
      }
      isCustomFieldValid = false;
      const errorMsg = salla.lang.get('common.errors.field_required', { attribute: field.title });
      this.validateField(field, errorMsg);
    });
    if (emailValidation && isPhoneValid && isFirstNameValid && isLastNameValid && isCustomFieldValid)
      return;
    !isEmailValid && this.validateField(this.regEmail, this.emailErrorMsg);
    !isFirstNameValid && this.validateField(this.firstName, this.firstNameErrorMsg);
    !isLastNameValid && this.validateField(this.lastName, this.lastNameErrorMsg);
    throw 'Please insert required fields';
  }
  getFilepondPlaceholder() {
    return `<div class="s-login-modal-filepond-placeholder"><span class="s-login-modal-filepond-placeholder-icon">${CameraIcon}</span><p class="s-login-modal-filepond-placeholder-text">${this.dragAndDrop}</p> <span class="filepond--label-action">${this.browseFromFiles}</span></div>`;
  }
  // eslint-disable-next-line @stencil/own-methods-must-be-private
  validateField(field, errorMsg) {
    field.classList.add('s-has-error');
    field.nextElementSibling['innerText'] = '* ' + errorMsg;
  }
  generateTabClasses(tabName) {
    return {
      's-login-modal-tab': tabName !== 'registration' && tabName !== 'otp',
      "s-hidden": this.currentTabName !== tabName,
      "s-show": this.currentTabName === tabName,
      's-login-modal-unactive': tabName !== 'registration' && tabName !== 'otp' && this.currentTabName !== tabName,
      's-login-modal-active': tabName !== 'registration' && tabName !== 'otp' && this.currentTabName === tabName
    };
  }
  generateRegClasses(regType) {
    return {
      "mb-1.5": true,
      "s-hidden": this.regType === regType
    };
  }
  render() {
    // @ts-ignore
    // @ts-ignore
    return (h("salla-modal", { class: "s-login-modal", "modal-title": this.title, ref: modal => this.modal = modal, width: "xs" }, h("span", { slot: 'icon', class: "s-login-modal-header-icon", innerHTML: UserIcon }), h("div", { class: "s-login-modal-wrapper" }, this.isEmailAllowed && this.isMobileAllowed ?
      h("div", { class: this.generateTabClasses('home'), "data-name": "home", ref: tab => this.homeTab = tab }, h("p", { class: "s-login-modal-sub-title" }, salla.lang.get('blocks.header.select_login_way')), h("slot", { name: "before-login-type" }), h("a", { href: "#", class: "s-login-modal-main-btn", onClick: (evt) => this.showTab(this.mobileTab, evt) }, h("span", { class: "s-login-modal-main-btn-icon", innerHTML: PhoneIcon }), h("span", { class: "s-login-modal-main-btn-text" }, salla.lang.get('blocks.header.sms')), h("span", { class: "s-login-modal-main-btn-arrow", innerHTML: KeyboardArrowRightIcon })), h("a", { href: "#", class: "s-login-modal-main-btn", onClick: (evt) => this.showTab(this.emailTab, evt) }, h("span", { class: "s-login-modal-main-btn-icon", innerHTML: EmailIcon }), h("span", { class: "s-login-modal-main-btn-text" }, salla.lang.get('common.elements.email')), h("span", { class: "s-login-modal-main-btn-arrow", innerHTML: KeyboardArrowRightIcon })), h("slot", { name: "after-login-type" }))
      : '', this.isMobileAllowed ?
      h("div", { class: this.generateTabClasses('login-phone'), "data-name": "login-phone", ref: tab => this.mobileTab = tab }, h("slot", { name: "before-login-mobile" }), h("form", { onSubmit: (event) => this.loginBySMS(event), method: "POST" }, h("label", { class: "s-login-modal-label" }, salla.lang.get('common.elements.mobile')), h("salla-tel-input", { tabindex: "0", ref: el => this.loginTelInput = el, onKeyDown: e => this.typing(e) }), h("salla-button", { class: "s-login-modal-enter-button", type: "submit", "loader-position": 'center', width: "wide", ref: b => this.smsBtn = b }, salla.lang.get('blocks.header.enter'))), this.isEmailAllowed ?
        h("a", { href: "#", onClick: () => this.showTab(this.emailTab), class: "s-login-modal-link" }, salla.lang.get('blocks.header.login_by_email')) : '', h("slot", { name: "after-login-mobile" })) : '', this.isEmailAllowed ?
      h("div", { class: this.generateTabClasses('login-email'), "data-name": "login-email", ref: tab => this.emailTab = tab }, h("slot", { name: "before-login-email" }), h("label", { class: "s-login-modal-label" }, salla.lang.get('common.elements.email')), h("form", { onSubmit: () => this.loginByEmail(event), method: "POST" }, h("input", { type: "email", ref: el => this.loginEmail = el, onKeyDown: e => this.typing(e), placeholder: "your@email.com", enterkeyhint: "next", class: "s-login-modal-input s-ltr" }), h("span", { class: "s-login-modal-error-message" }), h("salla-button", { "loader-position": 'center', width: "wide", onClick: () => this.loginByEmail(), ref: b => this.emailBtn = b }, salla.lang.get('blocks.header.enter'))), this.isMobileAllowed ?
        h("a", { href: "#", onClick: () => this.showTab(this.mobileTab), class: "s-login-modal-link" }, salla.lang.get('blocks.header.login_by_sms'))
        : '', h("slot", { name: "after-login-email" })) : '', h("salla-verify", { display: "inline", "support-web-auth": this.supportWebAuth ? 'true' : 'false', class: this.generateTabClasses('otp'), "data-name": "otp", ref: tab => this.verifyTab = tab, autoReload: false }, h("a", { onClick: () => this.showTab(this.regType == 'phone' ? this.mobileTab : this.emailTab), class: "s-verify-back", innerHTML: ArrowRightIcon, slot: "after-footer", href: "#" })), h("div", { "data-name": "registration", class: this.generateTabClasses('registration'), ref: tab => this.registrationTab = tab }, h("slot", { name: "before-registration" }), h("div", null, h("label", { class: "s-login-modal-label" }, salla.lang.get('blocks.header.your_name')), h("input", { type: "text", class: "s-login-modal-input", ref: el => this.firstName = el, onKeyDown: e => this.typing(e, this.newUser), placeholder: salla.lang.get('pages.profile.first_name') }), h("span", { class: "s-login-modal-error-message" })), h("div", null, h("label", { class: "s-login-modal-label" }, salla.lang.get('pages.profile.last_name')), h("input", { type: "text", class: "s-login-modal-input", ref: el => this.lastName = el, onKeyDown: e => this.typing(e, this.newUser), placeholder: salla.lang.get('pages.profile.last_name') }), h("span", { class: "s-login-modal-error-message" })), h("div", { class: this.generateRegClasses('phone') }, h("label", { class: "s-login-modal-label" }, salla.lang.get('common.elements.mobile')), h("salla-tel-input", { ref: el => this.regTelInput = el, onKeyDown: e => this.typing(e, this.newUser) })), h("div", { class: this.generateRegClasses('email') }, h("label", { class: "s-login-modal-label" }, salla.lang.get('common.elements.email')), h("input", { type: "email", ref: el => this.regEmail = el, onKeyDown: e => this.typing(e, this.newUser), placeholder: "your@email.com", class: "s-login-modal-input s-ltr" }), h("span", { class: "s-login-modal-error-message" })), h("div", { class: "s-login-modal-custom-fields", ref: el => this.customFieldsWrapper = el }, this.customFields.map((field) => [
      h("label", { class: "s-login-modal-label" }, field.label),
      field.type === CustomFieldType.PHOTO
        ? h("salla-file-upload", { name: "image", "instant-upload": true, id: `${field.id}`, title: field.label, required: field.required, url: salla.url.get('upload-image'),
          // onUploaded={}
          labelIdle: this.getFilepondPlaceholder() })
        : h("input", { onInput: el => field.type == CustomFieldType.NUMBER ? salla.helpers.inputDigitsOnly(el.target) : {}, onKeyDown: e => this.typing(e, this.newUser), class: "s-login-modal-input s-ltr", maxlength: field.length || 1000, placeholder: field.description, required: field.required, title: field.label, id: `${field.id}`, type: "text" }),
      h("span", { class: "s-login-modal-error-message" })
    ])), h("salla-button", { "loader-position": 'center', width: "wide", onClick: () => this.newUser(), ref: b => this.regBtn = b }, salla.lang.get('blocks.header.register')), h("slot", { name: "after-registration" })))));
  }
  static get is() { return "salla-login-modal"; }
  static get originalStyleUrls() {
    return {
      "$": ["salla-login-modal.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["salla-login-modal.css"]
    };
  }
  static get properties() {
    return {
      "isEmailAllowed": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Does the merchant allow to login using email"
        },
        "attribute": "is-email-allowed",
        "reflect": false
      },
      "isMobileAllowed": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Does the merchant/current location for visitor allow to login using mobile, By default outside KSA is `false`"
        },
        "attribute": "is-mobile-allowed",
        "reflect": false,
        "defaultValue": "true"
      },
      "isEmailRequired": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Does the merchant require registration with email & mobile"
        },
        "attribute": "is-email-required",
        "reflect": false,
        "defaultValue": "false"
      },
      "supportWebAuth": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Once the api verify success, it will be login the customer in web pages"
        },
        "attribute": "support-web-auth",
        "reflect": true,
        "defaultValue": "true"
      }
    };
  }
  static get states() {
    return {
      "currentTabName": {},
      "regType": {},
      "translationLoaded": {},
      "title": {},
      "emailErrorMsg": {},
      "firstNameErrorMsg": {},
      "lastNameErrorMsg": {},
      "dragAndDrop": {},
      "browseFromFiles": {},
      "customFields": {},
      "uploadedImage": {}
    };
  }
  static get methods() {
    return {
      "open": {
        "complexType": {
          "signature": "(event?: any) => Promise<HTMLElement>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            },
            "HTMLElement": {
              "location": "global"
            }
          },
          "return": "Promise<HTMLElement>"
        },
        "docs": {
          "text": "Open login component",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "host"; }
  static get listeners() {
    return [{
        "name": "verified",
        "method": "onVerified",
        "target": "window",
        "capture": false,
        "passive": false
      }];
  }
}
//# sourceMappingURL=salla-login-modal.js.map
