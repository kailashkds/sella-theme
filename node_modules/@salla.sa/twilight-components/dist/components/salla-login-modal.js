/*!
 * Crafted with ‚ù§ by Salla
 */
import { proxyCustomElement, HTMLElement, h } from '@stencil/core/internal/client';
import { e as email } from './mail.js';
import { C as CameraIcon } from './camera.js';
import { K as KeyboardArrowRightIcon } from './keyboard_arrow_right.js';
import { H as Helper } from './Helper.js';
import { d as defineCustomElement$7 } from './salla-button2.js';
import { d as defineCustomElement$6 } from './salla-file-upload2.js';
import { d as defineCustomElement$5 } from './salla-loading2.js';
import { d as defineCustomElement$4 } from './salla-modal2.js';
import { d as defineCustomElement$3 } from './salla-tel-input2.js';
import { d as defineCustomElement$2 } from './salla-verify2.js';

const UserIcon = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>user</title>
<path d="M16 16c4.412 0 8-3.588 8-8s-3.588-8-8-8-8 3.588-8 8 3.588 8 8 8zM16 2.667c2.941 0 5.333 2.392 5.333 5.333s-2.392 5.333-5.333 5.333-5.333-2.392-5.333-5.333 2.392-5.333 5.333-5.333zM16 18.667c-7.476 0-13.333 3.66-13.333 8.333v3.667c0 0.736 0.597 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-3.667c0-3.019 4.984-5.667 10.667-5.667s10.667 2.648 10.667 5.667v3.667c0 0.736 0.597 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-3.667c0-4.673-5.857-8.333-13.333-8.333z"></path>
</svg>
`;

const PhoneIcon = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>phone</title>
<path d="M30.823 21.713l-3.883-3.883c-1.569-1.568-4.12-1.568-5.689 0l-2.568 2.568c-3.063-1.499-5.583-4.019-7.081-7.083l2.568-2.567c0.759-0.76 1.177-1.771 1.177-2.845s-0.419-2.084-1.179-2.844l-3.881-3.881c-1.52-1.521-4.171-1.521-5.689 0l-1.845 1.847c-2.22 2.219-3.183 5.407-2.573 8.527 1.98 10.144 10.125 18.292 20.269 20.271 0.616 0.121 1.236 0.18 1.849 0.18 2.492 0 4.896-0.972 6.677-2.752l1.847-1.847c1.568-1.571 1.568-4.121 0.001-5.691zM28.936 25.517l-1.845 1.847c-1.592 1.592-3.883 2.283-6.132 1.841-9.089-1.776-16.388-9.075-18.163-18.165-0.439-2.247 0.249-4.539 1.841-6.129l1.847-1.847c0.256-0.257 0.596-0.397 0.959-0.397s0.703 0.14 0.959 0.397l3.883 3.883c0.256 0.256 0.397 0.596 0.397 0.959s-0.141 0.703-0.397 0.96l-3.22 3.217c-0.383 0.384-0.496 0.959-0.287 1.457 1.813 4.339 5.343 7.868 9.683 9.684 0.497 0.207 1.073 0.095 1.457-0.288l3.22-3.22c0.529-0.529 1.389-0.528 1.917 0l3.881 3.883c0.528 0.529 0.528 1.389 0 1.919z"></path>
</svg>
`;

const ArrowRightIcon = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>arrow-right</title>
<path d="M29.217 15.465c-0.019-0.044-0.056-0.077-0.080-0.119-0.067-0.116-0.139-0.227-0.236-0.317-0.011-0.009-0.013-0.024-0.024-0.033l-10.667-9.333c-0.553-0.484-1.396-0.429-1.881 0.125-0.484 0.555-0.428 1.396 0.127 1.881l7.996 6.997h-20.452c-0.737 0-1.333 0.597-1.333 1.333s0.596 1.333 1.333 1.333h20.452l-7.996 6.997c-0.555 0.485-0.611 1.327-0.127 1.881 0.264 0.3 0.633 0.455 1.004 0.455 0.312 0 0.625-0.109 0.877-0.331l10.667-9.333c0.011-0.009 0.015-0.024 0.024-0.033 0.097-0.091 0.169-0.201 0.236-0.317 0.024-0.041 0.060-0.075 0.080-0.119 0.073-0.163 0.116-0.343 0.116-0.533s-0.043-0.371-0.116-0.535z"></path>
</svg>
`;

var CustomFieldType;
(function (CustomFieldType) {
  CustomFieldType["TEXT"] = "text";
  CustomFieldType["NUMBER"] = "number";
  CustomFieldType["PHOTO"] = "photo";
})(CustomFieldType || (CustomFieldType = {}));

const sallaLoginModalCss = "";

const SallaLoginModal$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.customFieldsValues = {};
    this.typing = (e, submitMethod = null) => {
      const error = e.target.nextElementSibling;
      e.target.classList.remove('s-has-error');
      (error === null || error === void 0 ? void 0 : error.classList.contains('s-login-modal-error-message')) && (error.innerText = '');
      //it was sending two requests for send two verification requests
      submitMethod && e.key == 'Enter' && submitMethod();
    };
    this.loginBySMS = async (event = null) => {
      event === null || event === void 0 ? void 0 : event.preventDefault();
      const { phone, countryCode } = await this.loginTelInput.getValues();
      const isPhoneValid = await this.loginTelInput.isValid();
      if (!isPhoneValid) {
        return;
      }
      this.login(this.smsBtn, { type: 'mobile', phone: phone, country_code: countryCode });
      return false;
    };
    this.loginByEmail = (event = null) => {
      event === null || event === void 0 ? void 0 : event.preventDefault();
      if (!Helper.isValidEmail(this.loginEmail.value)) {
        this.validateField(this.loginEmail, this.emailErrorMsg);
        return;
      }
      this.login(this.emailBtn, { type: 'email', email: this.loginEmail.value });
    };
    this.newUser = async () => {
      var _a;
      const { phone: regPhone, countryCode } = this.regType == "email" ? await this.regTelInput.getValues() : await this.loginTelInput.getValues(), emailValue = this.regEmail.value || ((_a = this.loginEmail) === null || _a === void 0 ? void 0 : _a.value);
      await this.newUserValidation();
      await this.regBtn.load();
      await this.regBtn.disable();
      let data = {
        first_name: this.firstName.value,
        last_name: this.lastName.value,
        phone: regPhone || this.loginTelInput.phone,
        country_code: countryCode,
        verified_by: this.regType,
        custom_fields: this.customFieldsValues,
      };
      emailValue && (data = Object.assign(Object.assign({}, data), { email: emailValue }));
      this.verifyTab.getCode()
        .then(code => salla.auth.api.register(Object.assign(Object.assign({}, data), { code })))
        .then(() => salla.auth.canRedirect && window.location.reload())
        .catch((error) => {
        salla.logger.error(error);
        this.regBtn.stop() && this.regBtn.enable();
      });
    };
    this.isEmailAllowed = undefined;
    this.isMobileAllowed = true;
    this.isEmailRequired = false;
    this.supportWebAuth = true;
    this.currentTabName = 'home';
    this.regType = 'phone';
    this.translationLoaded = false;
    this.title = undefined;
    this.emailErrorMsg = undefined;
    this.firstNameErrorMsg = undefined;
    this.lastNameErrorMsg = undefined;
    this.dragAndDrop = salla.lang.get('common.uploader.drag_and_drop');
    this.browseFromFiles = salla.lang.get('common.uploader.browse');
    this.customFields = [];
    this.uploadedImage = undefined;
    this.title = this.host.title || salla.lang.get('blocks.header.login');
    this.host.removeAttribute('title');
    this.emailErrorMsg = salla.lang.get('common.elements.email_is_valid');
    this.firstNameErrorMsg = salla.lang.get('common.errors.field_required', { attribute: salla.lang.get('pages.profile.first_name') });
    this.lastNameErrorMsg = salla.lang.get('common.errors.field_required', { attribute: salla.lang.get('pages.profile.last_name') });
    salla.lang.onLoaded(() => {
      this.translationLoaded = true;
      this.title = salla.lang.get('blocks.header.login');
      this.dragAndDrop = salla.lang.get('common.uploader.drag_and_drop');
      this.browseFromFiles = salla.lang.get('common.uploader.browse');
      this.updateTranslations();
    });
    salla.event.on('login::open', (event) => this.open(event));
    salla.onReady(() => {
      this.isEmailAllowed = salla.config.get('store.settings.auth.email_allowed', this.isEmailAllowed);
      this.isMobileAllowed = salla.config.get('store.settings.auth.mobile_allowed', this.isMobileAllowed);
      this.isEmailRequired = salla.config.get('store.settings.auth.is_email_required', this.isEmailRequired);
    });
  }
  /**
   * @param {CustomEvent|{details:{case:'new_customer'|'authenticated', redirect_url:string|null}}} event
   */
  onVerified(event) {
    var _a, _b, _c, _d;
    salla.log('verified', event);
    //there is a case when force login is activated & is new user, it will return case inside error key., so cover it.
    let verifyCase = ((_a = event.detail) === null || _a === void 0 ? void 0 : _a.data.case) || ((_b = event.detail) === null || _b === void 0 ? void 0 : _b.error.case);
    if (!verifyCase) {
      salla.log('verified but without case!');
      return;
    }
    if (verifyCase === "new_customer") {
      this.customFields = ((_d = (_c = event.detail) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.custom_fields) || [];
      return this.showTab(this.registrationTab);
    }
    if (!salla.auth.canRedirect()) {
      salla.log('Will not auto redirect or reload, due to `salla.auth.canRedirect()`');
      this.modal.close();
      return;
    }
    if (event.detail.data.redirect_url) {
      return window.location.href = event.detail.data.redirect_url;
    }
    /**
     * we don't want to reload the page if this is not web auth
     * because we'll need the token in the page itself and its there
     * todo :: store the user data in storage for non-web auth and set the config.user from it
     */
    if (this.supportWebAuth) {
      window.location.reload();
    }
    else {
      this.modal.close();
    }
  }
  updateTranslations() {
    var _a;
    this.emailErrorMsg = salla.lang.get('common.elements.email_is_valid');
    this.firstNameErrorMsg = salla.lang.get('common.errors.field_required', { attribute: salla.lang.get('pages.profile.first_name') });
    this.lastNameErrorMsg = salla.lang.get('common.errors.field_required', { attribute: salla.lang.get('pages.profile.last_name') });
    (_a = this.modal) === null || _a === void 0 ? void 0 : _a.setTitle(this.title);
  }
  /**
   * Open login component
   */
  // @ts-ignore
  async open(event = null) {
    // todo :: support change the settings from event details
    // if(event && event.hasOwnProperty('isEmailAllowed')){
    //   this.isEmailAllowed = event?.isEmailAllowed;
    // }
    //
    // if(event && event.hasOwnProperty('isMobileAllowed')){
    //   this.isMobileAllowed = event?.isMobileAllowed;
    // }
    if (this.isEmailAllowed && this.isMobileAllowed) {
      this.showTab(this.homeTab);
    }
    else if (this.isEmailAllowed) {
      this.showTab(this.emailTab);
    }
    else if (this.isMobileAllowed) {
      this.showTab(this.mobileTab);
    }
    return this.modal.open();
  }
  showTab(tab, evt) {
    var _a;
    evt === null || evt === void 0 ? void 0 : evt.preventDefault();
    this.currentTabName = tab.getAttribute('data-name');
    // todo:: use better way for resize the modal
    // setTimeout(() => this.modal.querySelector('.s-login-modal-wrapper')?.setAttribute('style', 'height:' + tab?.scrollHeight + 'px'));
    if ([this.mobileTab, this.emailTab].includes(tab)) {
      this.regType = tab === this.mobileTab ? 'phone' : 'email';
    }
    const input = tab.querySelector('input[type="tel"], input[type="email"]');
    input && setTimeout(() => {
      input.focus();
    }, 100);
    (_a = this.modal) === null || _a === void 0 ? void 0 : _a.setTitle(this.currentTabName === 'registration' ? salla.lang.get('common.titles.registration') : this.title);
    return this;
  }
  login(btn, data) {
    btn.load()
      .then(() => btn.disable())
      .then(() => salla.auth.api.login(data))
      .then(() => this.showTab(this.verifyTab))
      .then(() => this.verifyTab.open(data))
      .finally(() => btn.stop() && btn.enable());
  }
  async newUserValidation() {
    const isLogByPhone = this.regType == "phone", isLogByEmail = this.regType == "email", emailValue = this.regEmail.value || (isLogByEmail && this.loginEmail.value), isEmailValid = Helper.isValidEmail(emailValue), isFirstNameValid = this.firstName.value.length > 0, isLastNameValid = this.lastName.value.length > 0, isPhoneValid = await this.regTelInput.isValid() || isLogByPhone && await this.loginTelInput.isValid(), emailValidation = (emailValue && isEmailValid) || (!emailValue && !this.isEmailRequired);
    // Custom Fields Validation
    var isCustomFieldValid = true;
    //we should make sure that there is text nodes between children
    this.customFieldsWrapper.childNodes
      .forEach((field) => {
      this.customFieldsValues[field.id] = field['value'];
      if (!field.required || this.customFieldsValues[field.id].length) {
        return;
      }
      isCustomFieldValid = false;
      const errorMsg = salla.lang.get('common.errors.field_required', { attribute: field.title });
      this.validateField(field, errorMsg);
    });
    if (emailValidation && isPhoneValid && isFirstNameValid && isLastNameValid && isCustomFieldValid)
      return;
    !isEmailValid && this.validateField(this.regEmail, this.emailErrorMsg);
    !isFirstNameValid && this.validateField(this.firstName, this.firstNameErrorMsg);
    !isLastNameValid && this.validateField(this.lastName, this.lastNameErrorMsg);
    throw 'Please insert required fields';
  }
  getFilepondPlaceholder() {
    return `<div class="s-login-modal-filepond-placeholder"><span class="s-login-modal-filepond-placeholder-icon">${CameraIcon}</span><p class="s-login-modal-filepond-placeholder-text">${this.dragAndDrop}</p> <span class="filepond--label-action">${this.browseFromFiles}</span></div>`;
  }
  // eslint-disable-next-line @stencil/own-methods-must-be-private
  validateField(field, errorMsg) {
    field.classList.add('s-has-error');
    field.nextElementSibling['innerText'] = '* ' + errorMsg;
  }
  generateTabClasses(tabName) {
    return {
      's-login-modal-tab': tabName !== 'registration' && tabName !== 'otp',
      "s-hidden": this.currentTabName !== tabName,
      "s-show": this.currentTabName === tabName,
      's-login-modal-unactive': tabName !== 'registration' && tabName !== 'otp' && this.currentTabName !== tabName,
      's-login-modal-active': tabName !== 'registration' && tabName !== 'otp' && this.currentTabName === tabName
    };
  }
  generateRegClasses(regType) {
    return {
      "mb-1.5": true,
      "s-hidden": this.regType === regType
    };
  }
  render() {
    // @ts-ignore
    // @ts-ignore
    return (h("salla-modal", { class: "s-login-modal", "modal-title": this.title, ref: modal => this.modal = modal, width: "xs" }, h("span", { slot: 'icon', class: "s-login-modal-header-icon", innerHTML: UserIcon }), h("div", { class: "s-login-modal-wrapper" }, this.isEmailAllowed && this.isMobileAllowed ?
      h("div", { class: this.generateTabClasses('home'), "data-name": "home", ref: tab => this.homeTab = tab }, h("p", { class: "s-login-modal-sub-title" }, salla.lang.get('blocks.header.select_login_way')), h("slot", { name: "before-login-type" }), h("a", { href: "#", class: "s-login-modal-main-btn", onClick: (evt) => this.showTab(this.mobileTab, evt) }, h("span", { class: "s-login-modal-main-btn-icon", innerHTML: PhoneIcon }), h("span", { class: "s-login-modal-main-btn-text" }, salla.lang.get('blocks.header.sms')), h("span", { class: "s-login-modal-main-btn-arrow", innerHTML: KeyboardArrowRightIcon })), h("a", { href: "#", class: "s-login-modal-main-btn", onClick: (evt) => this.showTab(this.emailTab, evt) }, h("span", { class: "s-login-modal-main-btn-icon", innerHTML: email }), h("span", { class: "s-login-modal-main-btn-text" }, salla.lang.get('common.elements.email')), h("span", { class: "s-login-modal-main-btn-arrow", innerHTML: KeyboardArrowRightIcon })), h("slot", { name: "after-login-type" }))
      : '', this.isMobileAllowed ?
      h("div", { class: this.generateTabClasses('login-phone'), "data-name": "login-phone", ref: tab => this.mobileTab = tab }, h("slot", { name: "before-login-mobile" }), h("form", { onSubmit: (event) => this.loginBySMS(event), method: "POST" }, h("label", { class: "s-login-modal-label" }, salla.lang.get('common.elements.mobile')), h("salla-tel-input", { tabindex: "0", ref: el => this.loginTelInput = el, onKeyDown: e => this.typing(e) }), h("salla-button", { class: "s-login-modal-enter-button", type: "submit", "loader-position": 'center', width: "wide", ref: b => this.smsBtn = b }, salla.lang.get('blocks.header.enter'))), this.isEmailAllowed ?
        h("a", { href: "#", onClick: () => this.showTab(this.emailTab), class: "s-login-modal-link" }, salla.lang.get('blocks.header.login_by_email')) : '', h("slot", { name: "after-login-mobile" })) : '', this.isEmailAllowed ?
      h("div", { class: this.generateTabClasses('login-email'), "data-name": "login-email", ref: tab => this.emailTab = tab }, h("slot", { name: "before-login-email" }), h("label", { class: "s-login-modal-label" }, salla.lang.get('common.elements.email')), h("form", { onSubmit: () => this.loginByEmail(event), method: "POST" }, h("input", { type: "email", ref: el => this.loginEmail = el, onKeyDown: e => this.typing(e), placeholder: "your@email.com", enterkeyhint: "next", class: "s-login-modal-input s-ltr" }), h("span", { class: "s-login-modal-error-message" }), h("salla-button", { "loader-position": 'center', width: "wide", onClick: () => this.loginByEmail(), ref: b => this.emailBtn = b }, salla.lang.get('blocks.header.enter'))), this.isMobileAllowed ?
        h("a", { href: "#", onClick: () => this.showTab(this.mobileTab), class: "s-login-modal-link" }, salla.lang.get('blocks.header.login_by_sms'))
        : '', h("slot", { name: "after-login-email" })) : '', h("salla-verify", { display: "inline", "support-web-auth": this.supportWebAuth ? 'true' : 'false', class: this.generateTabClasses('otp'), "data-name": "otp", ref: tab => this.verifyTab = tab, autoReload: false }, h("a", { onClick: () => this.showTab(this.regType == 'phone' ? this.mobileTab : this.emailTab), class: "s-verify-back", innerHTML: ArrowRightIcon, slot: "after-footer", href: "#" })), h("div", { "data-name": "registration", class: this.generateTabClasses('registration'), ref: tab => this.registrationTab = tab }, h("slot", { name: "before-registration" }), h("div", null, h("label", { class: "s-login-modal-label" }, salla.lang.get('blocks.header.your_name')), h("input", { type: "text", class: "s-login-modal-input", ref: el => this.firstName = el, onKeyDown: e => this.typing(e, this.newUser), placeholder: salla.lang.get('pages.profile.first_name') }), h("span", { class: "s-login-modal-error-message" })), h("div", null, h("label", { class: "s-login-modal-label" }, salla.lang.get('pages.profile.last_name')), h("input", { type: "text", class: "s-login-modal-input", ref: el => this.lastName = el, onKeyDown: e => this.typing(e, this.newUser), placeholder: salla.lang.get('pages.profile.last_name') }), h("span", { class: "s-login-modal-error-message" })), h("div", { class: this.generateRegClasses('phone') }, h("label", { class: "s-login-modal-label" }, salla.lang.get('common.elements.mobile')), h("salla-tel-input", { ref: el => this.regTelInput = el, onKeyDown: e => this.typing(e, this.newUser) })), h("div", { class: this.generateRegClasses('email') }, h("label", { class: "s-login-modal-label" }, salla.lang.get('common.elements.email')), h("input", { type: "email", ref: el => this.regEmail = el, onKeyDown: e => this.typing(e, this.newUser), placeholder: "your@email.com", class: "s-login-modal-input s-ltr" }), h("span", { class: "s-login-modal-error-message" })), h("div", { class: "s-login-modal-custom-fields", ref: el => this.customFieldsWrapper = el }, this.customFields.map((field) => [
      h("label", { class: "s-login-modal-label" }, field.label),
      field.type === CustomFieldType.PHOTO
        ? h("salla-file-upload", { name: "image", "instant-upload": true, id: `${field.id}`, title: field.label, required: field.required, url: salla.url.get('upload-image'),
          // onUploaded={}
          labelIdle: this.getFilepondPlaceholder() })
        : h("input", { onInput: el => field.type == CustomFieldType.NUMBER ? salla.helpers.inputDigitsOnly(el.target) : {}, onKeyDown: e => this.typing(e, this.newUser), class: "s-login-modal-input s-ltr", maxlength: field.length || 1000, placeholder: field.description, required: field.required, title: field.label, id: `${field.id}`, type: "text" }),
      h("span", { class: "s-login-modal-error-message" })
    ])), h("salla-button", { "loader-position": 'center', width: "wide", onClick: () => this.newUser(), ref: b => this.regBtn = b }, salla.lang.get('blocks.header.register')), h("slot", { name: "after-registration" })))));
  }
  get host() { return this; }
  static get style() { return sallaLoginModalCss; }
}, [4, "salla-login-modal", {
    "isEmailAllowed": [1028, "is-email-allowed"],
    "isMobileAllowed": [1028, "is-mobile-allowed"],
    "isEmailRequired": [1028, "is-email-required"],
    "supportWebAuth": [516, "support-web-auth"],
    "currentTabName": [32],
    "regType": [32],
    "translationLoaded": [32],
    "title": [32],
    "emailErrorMsg": [32],
    "firstNameErrorMsg": [32],
    "lastNameErrorMsg": [32],
    "dragAndDrop": [32],
    "browseFromFiles": [32],
    "customFields": [32],
    "uploadedImage": [32],
    "open": [64]
  }, [[8, "verified", "onVerified"]]]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["salla-login-modal", "salla-button", "salla-file-upload", "salla-loading", "salla-modal", "salla-tel-input", "salla-verify"];
  components.forEach(tagName => { switch (tagName) {
    case "salla-login-modal":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, SallaLoginModal$1);
      }
      break;
    case "salla-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$7();
      }
      break;
    case "salla-file-upload":
      if (!customElements.get(tagName)) {
        defineCustomElement$6();
      }
      break;
    case "salla-loading":
      if (!customElements.get(tagName)) {
        defineCustomElement$5();
      }
      break;
    case "salla-modal":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "salla-tel-input":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "salla-verify":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const SallaLoginModal = SallaLoginModal$1;
const defineCustomElement = defineCustomElement$1;

export { SallaLoginModal, defineCustomElement };

//# sourceMappingURL=salla-login-modal.js.map