/*!
 * Crafted with ❤ by Salla
 */
import { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';

const sallaPriceRangeCss = ":host{display:block}.rtl .rtl-range-slider,[dir=rtl] .rtl-range-slider{-webkit-transform:rotateY(180deg);transform:rotateY(180deg)}.rtl .rtl-range-numbers,[dir=rtl] .rtl-range-numbers{-ms-flex-direction:row-reverse;flex-direction:row-reverse}.rtl .form-select,.rtl select,[dir=rtl] .form-select,[dir=rtl] select{background-position:left 0.5rem center;padding-right:12px}.rtl .menu-divide li:not(:last-child):after,[dir=rtl] .menu-divide li:not(:last-child):after{left:0;right:auto}input[type=range]::-webkit-slider-thumb{pointer-events:all;width:24px;height:24px;-webkit-appearance:none}[type=checkbox]:checked{background-size:80%}";

const SallaPriceRange = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.changed = createEvent(this, "changed", 7);
    this.minPrice = 1000;
    this.maxPrice = 5000;
    this.option = undefined;
    this.filtersData = undefined;
    this.min = 0;
    this.max = 10000;
    this.minthumb = 0;
    this.maxthumb = 0;
    this.priceOptions = undefined;
    this.generatePriceOptions();
  }
  async reset() {
    var _a, _b;
    //@ts-ignore
    this.minInput.value = `${((_b = (_a = this.option) === null || _a === void 0 ? void 0 : _a.values) === null || _b === void 0 ? void 0 : _b.min) || 0}`;
    this.maxInput.value = `${this.max}`;
  }
  generatePriceOptions() {
    const MAX_PRICE = this.max;
    let option1 = Math.floor(MAX_PRICE / 100);
    if (option1 < 1) {
      option1 = Math.floor(MAX_PRICE / 10);
    }
    let option2 = Math.floor(MAX_PRICE / 2);
    let option3 = Math.floor((MAX_PRICE / 3) * 2);
    this.priceOptions = [option1, option2, option3];
    // to be removed
    console.log(`Price options for max price ${MAX_PRICE}: ${this.priceOptions.join(', ')}`);
  }
  getPriceLabel(price) {
    if (price == Math.floor(this.max / 100)) {
      return `اقل من ${salla.money(price)}`;
    }
    else if (price == Math.floor(this.max / 2)) {
      return `${salla.money(this.priceOptions[0])} الى ${salla.money(this.priceOptions[2])}`;
    }
    else {
      return `أكثر من ${salla.money(price)}`;
    }
  }
  handleMinMaxPrice(event, option) {
    const [firstOption, secondOption, thirdOption] = this.priceOptions;
    switch (option) {
      case firstOption:
        this.minPrice = 0;
        this.maxPrice = firstOption;
        break;
      case secondOption:
        this.minPrice = firstOption;
        this.maxPrice = thirdOption;
        break;
      case thirdOption:
        this.minPrice = thirdOption;
        this.maxPrice = this.max;
        break;
      default:
        throw new Error(`Invalid price option: ${option}`);
    }
    // Update the input values
    this.minInput.value = `${this.minPrice}`;
    this.maxInput.value = `${this.maxPrice}`;
    this.changedEventHandler(event);
  }
  async changedEventHandler(event, isMin = false) {
    let value = event ? event.target.value * 1 : null;
    if (isMin) {
      this.minInputValidation(value);
      this.minthumb = ((this.minPrice - this.min) / (this.max - this.min)) * 100;
    }
    else {
      this.maxInputValidation(value);
      this.maxthumb = 100 - (((this.maxPrice - this.min) / (this.max - this.min)) * 100);
    }
    this.isReady && this.changed.emit({
      event: event,
      option: this.option,
      value: { max: this.maxPrice, min: this.minPrice }
    });
  }
  minInputValidation(value) {
    if (value && (value > this.max || value > this.maxPrice)) {
      // this.minPrice = this.maxPrice;
      return;
    }
    if (value < this.min) {
      this.minPrice = this.min;
      return;
    }
    if (value) {
      this.minPrice = value;
    }
  }
  maxInputValidation(value) {
    if (value && (value < this.min || value < this.minPrice)) {
      // this.maxPrice = this.minPrice;
      return;
    }
    if (value > this.max) {
      this.maxPrice = this.max;
      return;
    }
    if (value) {
      this.maxPrice = value;
    }
  }
  isChecked(option) {
    if (option == Math.floor(this.max / 100)) {
      return this.minPrice == 0 && this.maxPrice == option;
    }
    if (option == Math.floor(this.max / 2)) {
      return this.minPrice == this.priceOptions[0] && this.maxPrice == this.priceOptions[2];
    }
    if (option == Math.floor((this.max / 3) * 2)) {
      return this.minPrice == option && this.maxPrice == this.max;
    }
  }
  render() {
    return (h(Host, null, this.priceOptions && this.priceOptions.map((option, index) => {
      return h("label", { class: "s-filters-label", htmlFor: `${option}-${index}` }, h("input", { id: `${option}-${index}`, name: "price", type: "radio", checked: this.isChecked(option), class: "s-filters-radio", onChange: e => this.handleMinMaxPrice(e, option) }), this.getPriceLabel(option));
    }), h("div", { class: "flex justify-center items-center" }, h("div", { class: "relative max-w-xl w-full" }, h("div", { class: "s-price-range-inputs" }, h("div", { class: "s-price-range-relative" }, h("div", { class: "s-price-range-currency" }, " ", salla.config.currency().symbol), h("input", { type: "number", maxlength: "5", ref: el => this.minInput = el, onInput: (event) => this.changedEventHandler(event, true),
      // value={this.minPrice}
      placeholder: "\u0645\u0646", class: "s-price-range-number-input" })), h("div", { class: "s-price-range-gray-text" }, " -"), h("div", { class: "s-price-range-relative" }, h("div", { class: "s-price-range-currency" }, " ", salla.config.currency().symbol), h("input", { type: "number", maxlength: "5", placeholder: "\u0627\u0644\u0649", ref: el => this.maxInput = el, onInput: (event) => this.changedEventHandler(event),
      // value={this.maxPrice}
      class: "s-price-range-number-input", "aria-describedby": "price-currency" })))))));
  }
  componentDidLoad() {
    var _a;
    if (this.filtersData && ((_a = this.filtersData) === null || _a === void 0 ? void 0 : _a.price)) {
      this.minPrice = this.filtersData.price.min;
      this.maxPrice = this.filtersData.price.max;
      this.maxInput.value = `${this.maxPrice}`;
      this.minInput.value = `${this.minPrice}`;
    }
    this.isReady = true;
  }
  static get style() { return sallaPriceRangeCss; }
}, [0, "salla-price-range", {
    "minPrice": [1026, "min-price"],
    "maxPrice": [1026, "max-price"],
    "option": [16],
    "filtersData": [520, "filters-data"],
    "min": [32],
    "max": [32],
    "minthumb": [32],
    "maxthumb": [32],
    "priceOptions": [32],
    "reset": [64]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["salla-price-range"];
  components.forEach(tagName => { switch (tagName) {
    case "salla-price-range":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, SallaPriceRange);
      }
      break;
  } });
}

export { SallaPriceRange as S, defineCustomElement as d };

//# sourceMappingURL=salla-price-range2.js.map