{"file":"salla-product-availability2.js","mappings":"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","names":["BellRingIcon"],"sources":["./src/components/salla-product-availability/salla-product-availability.scss?tag=salla-product-availability","./src/components/salla-product-availability/salla-product-availability.tsx"],"sourcesContent":["/*\n* Salla Product Availability Component: popup modal to notify user if the product is available,\n* used in the product single page if the product isn't available.\n* You can use these classes to target the elements in the component.\n*/\n.s-product-availability {\n  &-wrap {\n\n  }\n  &-subscribed {\n\n  }\n\n  &-subs-icon {\n\n  }\n\n  &-body {\n\n  }\n\n  &-label {\n\n  }\n\n  &-input {\n\n  }\n\n  &-footer {\n\n  }\n\n  &-footer-btn {\n\n  }\n\n  &-error-msg {\n\n  }\n}\n","import {Component, Element, Host, Prop, State, Watch, h} from '@stencil/core';\nimport BellRingIcon from '../../assets/svg/bell-ring.svg';\nimport Helper from '../../Helpers/Helper';\n\n@Component({tag: 'salla-product-availability', styleUrl: 'salla-product-availability.scss'})\n\nexport class SallaProductAvailability {\n  constructor() {\n    salla.lang.onLoaded(() => {\n      this.translationLoaded = true;\n      this.title_ = this.host.title || salla.lang.get('pages.products.notify_availability_title');\n      this.modal?.setTitle(this.title_);\n    });\n    if (!this.productId) {\n      this.productId = salla.config.get('page.id');\n    }\n\n    if (this.isUser) return;\n\n    this.channelsWatcher(this.channels);\n    this.title_ = this.host.title || salla.lang.get('pages.products.notify_availability_title');\n    this.host.removeAttribute('title');\n\n    //todo:: fix this to cover options too\n    this.isVisitorSubscribed = !this.notifyOptionsAvailability ? salla.storage.get(`product-${this.productId}-subscribed`) : '';\n  }\n\n\n  private isUser: boolean = salla.config.isUser();\n  private modal: HTMLSallaModalElement;\n  private channels_: Array<string>;\n  private email: HTMLInputElement;\n  private btn: HTMLSallaButtonElement;\n  private mobileInput: HTMLSallaTelInputElement;\n\n  @Element() host: HTMLElement;\n\n  @State() translationLoaded: boolean = false;\n  @State() title_: string;\n  @State() isVisitorSubscribed: string;\n\n\n  /**\n   * Notification channels\n   */\n  @Prop() channels: 'sms' | 'email' | 'sms,email';\n\n  /**\n   * Listen to product options availability.\n   */\n  @Prop() notifyOptionsAvailability: boolean = false;\n\n  /**\n   * product id that can visitor subscribe to its availability notification\n   */\n  @Prop() productId: number;\n  /**\n   * is current user already subscribed\n   */\n  @Prop({mutable: true}) isSubscribed: boolean = false;\n\n\n  @Watch('channels')\n  channelsWatcher(newValue) {\n    this.channels_ = !!newValue ? newValue.split(',') : [];\n  }\n\n  private handleSubmitOptions = async () => {\n    let payload: any = {id: this.productId};\n    if (!this.notifyOptionsAvailability) {\n      return payload;\n    }\n    let optionsElement: HTMLSallaProductOptionsElement = document.querySelector(`salla-product-options[product-id=\"${this.productId}\"]`);\n    let options: Array<any> = Object.values(await optionsElement?.getSelectedOptionsData() || {});\n    //if all options not selected, show message && throw exception\n    if (options.length && !await optionsElement?.reportValidity()) {\n      let errorMessage = salla.lang.get('common.messages.required_fields');\n      salla.error(errorMessage);\n      throw errorMessage;\n    }\n\n    payload.options = [];\n    options.forEach(option => {\n      //inject numbers only, without zeros\n      if (option && !isNaN(option)) {\n        payload.options.push(Number(option));\n      }\n    })\n    return payload;\n  }\n\n  private openModel() {\n    this.handleSubmitOptions().then(isSuccess => isSuccess ? this.modal.open() : null)\n  }\n\n  private async submit() {\n    let payload: any = await this.handleSubmitOptions();\n\n    if (this.isUser) {\n      return salla.api.product.availabilitySubscribe(payload)\n        .then(() => this.isSubscribed = true);\n    }\n\n    if (this.channels_.includes('sms')) {\n      let {phone, countryCode} = await this.mobileInput.getValues();\n      payload['country_code'] = countryCode;\n      payload['phone'] = phone;\n    }\n\n    if (this.channels_.includes('email')) {\n      this.email.value !== '' && (payload['email'] = this.email.value);\n    }\n\n    await this.validateform();\n\n    return this.btn.load()\n      .then(() => this.btn.disable())\n      .then(() => salla.api.product.availabilitySubscribe(payload))\n      .then(() => {\n        if (!this.notifyOptionsAvailability) {\n          salla.storage.set(`product-${this.productId}-subscribed`, true);\n          this.isSubscribed = true;\n          return;\n        }\n        if (payload.options.length) {\n          let options = salla.storage.get(`product-${this.productId}-subscribed-options`) || [];\n          let selectedOptionsString = payload.options.join(',');\n          if (!options.includes(selectedOptionsString)) {\n            options.push(selectedOptionsString);\n            salla.storage.set(`product-${this.productId}-subscribed-options`, options);\n            this.isSubscribed = true;\n          } else {\n            salla.log('already subscribed to this options');\n          }\n        }\n      })\n      .then(() => this.btn.stop())\n      .then(() => this.modal.close())\n      .catch(() => this.btn.stop() && this.btn.enable());\n  }\n\n  private async validateform() {\n    try {\n      if (this.channels_.includes('email')) {\n        const isEmailValid = Helper.isValidEmail(this.email.value);\n        if (isEmailValid) return;\n        !isEmailValid && this.validateField(this.email, salla.lang.get('common.elements.email_is_valid'));\n      }\n      if (this.channels_.includes('sms')) {\n        const isPhoneValid = await this.mobileInput.isValid();\n        if (isPhoneValid) return;\n      }\n    } catch (error) {\n      throw ('Please insert required fields');\n    }\n  }\n\n\n  // helpers\n  private typing = (e) => {\n    const error = e.target.nextElementSibling;\n    e.target.classList.remove('s-has-error');\n    error?.classList.contains('s-product-availability-error-msg') && (error.innerText = '');\n    e.keyCode === 13 && this.submit();\n  }\n\n  validateField(field: HTMLInputElement, errorMsg: string) {\n    field.classList.add('s-has-error');\n    field.nextElementSibling['innerText'] = '* ' + errorMsg;\n  }\n\n  render() {\n    return (\n      <Host class=\"s-product-availability-wrap\">{this.isSubscribed || this.isVisitorSubscribed\n        ? <div class=\"s-product-availability-subscribed\">\n          <span innerHTML={BellRingIcon} class=\"s-product-availability-subs-icon\"/>\n          {salla.lang.get('pages.products.notify_availability_success')}\n        </div>\n        :\n        <salla-button width=\"wide\" onClick={() => this.isUser ? this.submit() : this.openModel()}>\n          {salla.lang.get('pages.products.notify_availability')}\n        </salla-button>\n\n      }\n        {this.isUser || this.isSubscribed || this.isVisitorSubscribed ? '' : this.renderModal()}\n      </Host>\n    );\n  }\n\n  private renderModal() {\n    return (\n      <salla-modal ref={modal => this.modal = modal} modal-title={this.title_}\n                   subTitle={salla.lang.get('pages.products.notify_availability_subtitle')} width=\"sm\">\n        <span slot='icon' class=\"s-product-availability-header-icon\" innerHTML={BellRingIcon}/>\n        <div class=\"s-product-availability-body\">\n          {this.channels_.includes('email') ? [\n            <label class=\"s-product-availability-label\">{salla.lang.get('common.elements.email')}</label>,\n            <input class=\"s-product-availability-input\" onKeyDown={e => this.typing(e)}\n            placeholder={salla.lang.get('common.elements.email_placeholder') || 'your@email.com'}\n            ref={el => this.email = el}\n            type=\"email\" />,\n            <span class=\"s-product-availability-error-msg\"/>\n          ] : ''}\n\n          {this.channels_.includes('sms') ? [\n            <label class=\"s-product-availability-label\">{salla.lang.get('common.elements.mobile')}</label>,\n            <salla-tel-input ref={el => this.mobileInput = el} onKeyDown={e => this.typing(e)} />\n          ] : ''}\n        </div>\n        <div slot=\"footer\" class=\"s-product-availability-footer\">\n          <salla-button class=\"modal-cancel-btn\" width=\"wide\" color=\"light\" fill=\"outline\"\n                        onClick={() => this.modal.close()}>\n            {salla.lang.get('common.elements.cancel')}\n          </salla-button>\n          <salla-button class=\"submit-btn\" loader-position='center' width=\"wide\" ref={btn => this.btn = btn}\n                        onClick={() => this.submit()}>{salla.lang.get('common.elements.submit')}</salla-button>\n        </div>\n      </salla-modal>);\n  }\n}\n"],"version":3}