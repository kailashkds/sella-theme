/*!
 * Crafted with ❤ by Salla
 */
import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { d as defineCustomElement$c } from './salla-add-product-button2.js';
import { d as defineCustomElement$b } from './salla-button2.js';
import { d as defineCustomElement$a } from './salla-count-down2.js';
import { d as defineCustomElement$9 } from './salla-loading2.js';
import { d as defineCustomElement$8 } from './salla-modal2.js';
import { d as defineCustomElement$7 } from './salla-product-availability2.js';
import { d as defineCustomElement$6 } from './salla-product-card2.js';
import { d as defineCustomElement$5 } from './salla-progress-bar2.js';
import { d as defineCustomElement$4 } from './salla-quick-buy2.js';
import { d as defineCustomElement$3 } from './salla-slider2.js';
import { d as defineCustomElement$2 } from './salla-tel-input2.js';

const sallaProductsSliderCss = "";

const SallaProductsSlider$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.blockTitle = undefined;
    this.subTitle = undefined;
    this.sliderId = undefined;
    this.displayAllUrl = undefined;
    this.source = undefined;
    this.sourceValue = undefined;
    this.limit = undefined;
    this.productsData = undefined;
    this.isReady = undefined;
    this.sourceValueIsValid = undefined;
    this.hasCustomComponent = undefined;
    this.apiUrl = '';
    this.parsedSourceValue = undefined;
    salla.onReady(() => {
      this.sourceValueIsValid = !!(this.sourceValue || ['latest', 'offers'].includes(this.getSource()));
    });
    if (!this.sourceValueIsValid) {
      salla.logger.warn(`source-value prop is required for source [${this.getSource()}]`);
      return;
    }
    this.hasCustomComponent = !!customElements.get('custom-salla-product-card');
  }
  getItemHTML(product) {
    if (this.hasCustomComponent) {
      return h("div", { class: "s-products-slider-card" }, h("custom-salla-product-card", { product: product, source: this.getSource(), "source-value": this.getSourceValue() }));
    }
    return h("div", { class: "s-products-slider-card" }, h("salla-product-card", { "show-quantity": this.getSource() == 'landing-page', "hide-add-btn": this.getSource() == 'landing-page', "shadow-on-hover": true, product: product }));
  }
  getUrlPrefix() {
    let urlPrefix = '';
    if (this.limit) {
      urlPrefix = `&per_page=${this.limit > 32 ? 32 : this.limit}`;
    }
    return urlPrefix;
  }
  getApiUrl() {
    if (this.getSource() === 'json') {
      return;
    }
    let prefixes = this.getUrlPrefix();
    if (['offers', 'latest'].includes(this.getSource())) {
      return salla.url.api(`products?source=${this.getSource()}${prefixes}`);
    }
    if (['related', 'landing-page'].includes(this.getSource())) {
      return salla.url.api(`products?source=${this.getSource()}&source_value=${this.getSourceValue()}${prefixes}`);
    }
    try {
      return salla.url.api(`products?source=${this.getSource()}&source_value[]=${this.getSourceValue().join('&source_value[]=')}${prefixes}`);
    }
    catch (e) {
      salla.logger.warn(`source-value prop should be array of ids ex source-value="[1,2,3]" for the source [${this.getSource()}]`);
      this.sourceValueIsValid = false;
    }
  }
  getSource() {
    return {
      'brands.single': 'brands',
      'product.index': 'categories',
      'product.index.latest': 'latest',
      'product.index.offers': 'offers',
      'product.index.search': 'search',
      'landing-page': 'landing-page',
      'product.index.tag': 'tags',
    }[this.source || salla.config.get('page.slug')] || this.source || 'latest';
  }
  getSourceValue() {
    if (!['search', 'json'].includes(this.getSource())) {
      if (Array.isArray(JSON.parse(this.sourceValue)) && JSON.parse(this.sourceValue).length) {
        return JSON.parse(this.sourceValue);
      }
      if (typeof JSON.parse(this.sourceValue) == 'number') {
        return [JSON.parse(this.sourceValue)];
      }
    }
    return this.sourceValue || salla.config.get('page.id');
  }
  canRender() {
    return this.sourceValueIsValid && this.isReady;
  }
  componentWillLoad() {
    if (this.source === 'json') {
      this.productsData = this.getSourceValue();
      this.isReady = true;
      return;
    }
    salla.api.request(this.getApiUrl(), null, 'get').then(res => {
      this.productsData = res.data;
      this.isReady = true;
    });
  }
  render() {
    var _a;
    if ((this.getSource() == 'related' && !salla.config.get('store.settings.product.related_products_enabled')) || !this.canRender()) {
      return;
    }
    return (h(Host, { class: "s-products-slider-wrapper" }, h("salla-slider", { class: "s-products-slider-slider", id: this.sliderId || `s-products-slider-${Math.random().toString(36).substr(2, 9)}`, type: "carousel", "block-title": this.blockTitle, "block-subTitle": this.subTitle, "display-all-url": this.displayAllUrl }, h("div", { slot: "items" }, (_a = this.productsData) === null || _a === void 0 ? void 0 : _a.map((product) => this.getItemHTML(product))))));
  }
  get host() { return this; }
  static get style() { return sallaProductsSliderCss; }
}, [0, "salla-products-slider", {
    "blockTitle": [1, "block-title"],
    "subTitle": [1, "sub-title"],
    "sliderId": [1, "slider-id"],
    "displayAllUrl": [1, "display-all-url"],
    "source": [1537],
    "sourceValue": [1, "source-value"],
    "limit": [1026],
    "productsData": [32],
    "isReady": [32],
    "sourceValueIsValid": [32],
    "hasCustomComponent": [32],
    "apiUrl": [32],
    "parsedSourceValue": [32]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["salla-products-slider", "salla-add-product-button", "salla-button", "salla-count-down", "salla-loading", "salla-modal", "salla-product-availability", "salla-product-card", "salla-progress-bar", "salla-quick-buy", "salla-slider", "salla-tel-input"];
  components.forEach(tagName => { switch (tagName) {
    case "salla-products-slider":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, SallaProductsSlider$1);
      }
      break;
    case "salla-add-product-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$c();
      }
      break;
    case "salla-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$b();
      }
      break;
    case "salla-count-down":
      if (!customElements.get(tagName)) {
        defineCustomElement$a();
      }
      break;
    case "salla-loading":
      if (!customElements.get(tagName)) {
        defineCustomElement$9();
      }
      break;
    case "salla-modal":
      if (!customElements.get(tagName)) {
        defineCustomElement$8();
      }
      break;
    case "salla-product-availability":
      if (!customElements.get(tagName)) {
        defineCustomElement$7();
      }
      break;
    case "salla-product-card":
      if (!customElements.get(tagName)) {
        defineCustomElement$6();
      }
      break;
    case "salla-progress-bar":
      if (!customElements.get(tagName)) {
        defineCustomElement$5();
      }
      break;
    case "salla-quick-buy":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "salla-slider":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "salla-tel-input":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const SallaProductsSlider = SallaProductsSlider$1;
const defineCustomElement = defineCustomElement$1;

export { SallaProductsSlider, defineCustomElement };

//# sourceMappingURL=salla-products-slider.js.map