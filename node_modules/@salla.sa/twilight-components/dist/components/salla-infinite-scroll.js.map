{"file":"salla-infinite-scroll.js","mappings":"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","names":["SallaInfiniteScroll"],"sources":["./src/components/salla-infinite-scroll/salla-infinite-scroll.scss?tag=salla-infinite-scroll","./src/components/salla-infinite-scroll/salla-infinite-scroll.tsx"],"sourcesContent":["/*\n* Salla Infinite Scroll Component: used in latest-products page, comments, brands, orders and so on..\n* You can use these classes to target the elements in the component.\n*/\n\n.s-infinite-scroll {\n  &-wrapper {\n    \n  }\n  // last & error message wrapper.\n  &-status{\n\n  }\n  // the message that displys after reaching the last page.\n  &-last {\n    \n  }\n  // the message that displys if there is an error on loading\n  &-error {\n    \n  }\n  // Load more button\n  &-btn{\n    // button text\n    &-text{\n\n    }\n    // spinner loader\n    &-loader{\n\n    }\n  }\n}","import { Component, Element, h, Host, Prop, State } from '@stencil/core';\nimport Helper from '../../Helpers/Helper';\n/**\n */\n@Component({ tag: 'salla-infinite-scroll', styleUrl: 'salla-infinite-scroll.scss' })\nexport class SallaInfiniteScroll {\n  constructor() {\n    this.status = document.createElement('div');\n    this.status.className = 's-infinite-scroll-wrapper';\n    this.status.innerHTML = `<div class=\"s-infinite-scroll-status\" style=\"display:none\">\n        <p class=\"s-infinite-scroll-last infinite-scroll-last\"></p>\n        <p class=\"s-infinite-scroll-error infinite-scroll-error\"></p>\n      </div>\n      <a href=\"${this.nextPage}\" class=\"s-infinite-scroll-btn s-button-btn s-button-primary\">\n        <span class=\"s-button-text s-infinite-scroll-btn-text\">${salla.lang.get('common.elements.load_more')}</span>\n        <span class=\"s-button-loader s-button-loader-center s-infinite-scroll-btn-loader\" style=\"display: none\"></span>\n      </a>`;\n    this.btnLoader = this.status.querySelector('.s-button-loader');\n    salla.lang.onLoaded(() => {\n      this.status.querySelector('.s-button-text').innerHTML = salla.lang.get('common.elements.load_more');\n      this.status.querySelector('.s-infinite-scroll-last').innerHTML = salla.lang.get('common.elements.end_of_content');\n      this.status.querySelector('.s-infinite-scroll-error').innerHTML = salla.lang.get('common.elements.failed_to_load_more');\n    });\n  }\n\n\n  /**\n   * Next Page element\n   */\n  @Prop() nextPage: string = '';\n  /**\n   * Is there is need to autoload next page when scroll `next-page-autoload|next-page.autoload`\n   */\n  @Prop({ mutable: true }) autoload: boolean = false;\n  /**\n   * Class selector to know the container if it's not the host `<salla-infinite-scroll>`\n   */\n  @Prop() container: string = 'salla-infinite-scroll';\n  /**\n   * Class selector to know list items\n   */\n  @Prop() item: string = 'salla-infinite-scroll > *';\n  @State() loadMore: string;\n  @State() noMore: string;\n  @State() failedToLoad: string;\n  private readonly status: HTMLDivElement;\n  private btnLoader: HTMLAnchorElement;\n\n  @Element() host: HTMLElement;\n\n  private loading(isLoading = true) {\n    let btnText = this.status.querySelector('.s-button-text');\n    Helper.toggleElementClassIf(btnText, 's-button-hide', 's-button-show', () => isLoading);\n    this.btnLoader.style.display = isLoading ? 'inherit' : 'none';\n  }\n\n  render() {\n    return this.nextPage.length > 1 ?\n      <Host class=\"s-infinite-scroll-container\">\n        <slot />\n      </Host> : '';\n  }\n\n  componentDidLoad() {\n    if (this.nextPage.length === 0) {\n      return;\n    }\n    this.host.insertAdjacentElement('afterend', this.status);\n    let that = this;\n    let infScroll = salla.infiniteScroll.initiate(this.container, {\n      history: this.autoload ? 'push' : false,\n      scrollThreshold: this.autoload ? 400 : false,\n      nextPage: this.nextPage,\n      checkLastPage: 'salla-infinite-scroll[next-page*=\":\"],salla-infinite-scroll[next-page*=\".\"]',\n      status: '.s-infinite-scroll-status',\n      button: this.status.querySelector('.s-button-btn'),\n      append: this.item,\n      path: function () {\n        return that.nextPage.replace(/page\\=(\\d)/g, 'page=' + (this.loadCount + 2));\n      },\n    })\n      .on('request', () => this.loading())\n      .on('load', () => {\n        this.loading(false);\n\n        if (infScroll.pageIndex == 2) {\n          infScroll.option({ loadOnScroll: false });\n        }\n\n        if (infScroll.pageIndex == 3) {\n          infScroll.option({ loadOnScroll: true });\n        }\n      })\n      .on('error', () => this.loading(false));\n  }\n}\n"],"version":3}