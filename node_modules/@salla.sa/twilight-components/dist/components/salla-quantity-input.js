/*!
 * Crafted with ‚ù§ by Salla
 */
import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { H as Helper } from './Helper.js';

const Add = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>add</title>
<path d="M26.667 14.667h-9.333v-9.333c0-0.736-0.597-1.333-1.333-1.333s-1.333 0.597-1.333 1.333v9.333h-9.333c-0.736 0-1.333 0.597-1.333 1.333s0.597 1.333 1.333 1.333h9.333v9.333c0 0.736 0.597 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-9.333h9.333c0.736 0 1.333-0.597 1.333-1.333s-0.597-1.333-1.333-1.333z"></path>
</svg>
`;

const Minus = `<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32">
<title>minus</title>
<path d="M26.667 14.667h-21.333c-0.736 0-1.333 0.597-1.333 1.333s0.597 1.333 1.333 1.333h21.333c0.736 0 1.333-0.597 1.333-1.333s-0.597-1.333-1.333-1.333z"></path>
</svg>
`;

const sallaQuantityInputCss = "";

const SallaQuantityInput$1 = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.hostAttributes = {};
    this.hasIncrementSlot = false;
    this.hasDecrementSlot = false;
    this.didLoaded = false;
    this.quantity = 1;
  }
  /**
   * Workaround to fire change event for the input.
   */
  watchPropHandler() {
    if (!this.didLoaded) {
      return;
    }
    Helper.debounce(() => salla.document.event.fireEvent(this.textInput, 'change', { 'bubbles': true }));
  }
  componentWillLoad() {
    this.quantity = parseInt(this.host.getAttribute('value')) || 1;
    this.hasIncrementSlot = !!this.host.querySelector('[slot="increment-button"]');
    this.hasDecrementSlot = !!this.host.querySelector('[slot="decrement-button"]');
  }
  componentDidLoad() {
    this.didLoaded = true;
    this.textInput.addEventListener('input', (event) => salla.helpers.inputDigitsOnly(event.target));
  }
  getInputAttributes() {
    for (let i = 0; i < this.host.attributes.length; i++) {
      if (!['id', 'value', 'min', 'class'].includes(this.host.attributes[i].name)) {
        this.hostAttributes[this.host.attributes[i].name] = this.host.attributes[i].value;
      }
    }
    return this.hostAttributes;
  }
  /**
   * decrease quantity by one.
   * @return HTMLSallaQuantityInputElement
   */
  async decrease() {
    return this.setValue(this.quantity - 1);
  }
  /**
   * increase quantity by one.
   * @return HTMLSallaQuantityInputElement
   */
  async increase() {
    return this.setValue(Number(this.quantity) + 1);
  }
  /**
   * set quantity by one.
   * @return HTMLSallaQuantityInputElement
   */
  async setValue(value) {
    let maxQuantity = parseInt(this.host.getAttribute('max'));
    if (maxQuantity && value > maxQuantity) {
      value = maxQuantity;
    }
    if (value <= 1) {
      value = 1;
    }
    this.quantity = value;
    return this.host;
  }
  render() {
    return (h(Host, { class: "s-quantity-input" }, h("div", { class: "s-quantity-input-container" }, h("button", { onClick: () => this.increase(), class: "s-quantity-input-increase-button s-quantity-input-button", type: "button" }, !this.hasIncrementSlot ? h("span", { innerHTML: Add }) : '', h("slot", { name: "increment-button" })), h("input", Object.assign({ class: "s-quantity-input-input" }, this.getInputAttributes(), { ref: (el) => this.textInput = el, onInput: (event) => this.setValue(event.target.value), min: "1", value: this.quantity })), h("button", { class: "s-quantity-input-decrease-button s-quantity-input-button", onClick: () => this.decrease(), type: "button" }, !this.hasDecrementSlot ? h("span", { innerHTML: Minus }) : '', h("slot", { name: "decrement-button" })))));
  }
  get host() { return this; }
  static get watchers() { return {
    "quantity": ["watchPropHandler"]
  }; }
  static get style() { return sallaQuantityInputCss; }
}, [4, "salla-quantity-input", {
    "quantity": [32],
    "decrease": [64],
    "increase": [64],
    "setValue": [64]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["salla-quantity-input"];
  components.forEach(tagName => { switch (tagName) {
    case "salla-quantity-input":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, SallaQuantityInput$1);
      }
      break;
  } });
}

const SallaQuantityInput = SallaQuantityInput$1;
const defineCustomElement = defineCustomElement$1;

export { SallaQuantityInput, defineCustomElement };

//# sourceMappingURL=salla-quantity-input.js.map