import { EventEmitter } from '../../stencil-public-runtime';
import { Option, Detail } from './interfaces';
export declare class SallaProductOptions {
  constructor();
  private setOptionsData;
  host: HTMLElement;
  private fileTypes;
  optionsData: Option[];
  outOfStockText: string;
  donationAmount: string;
  selectedOptions: Array<any>;
  canDisabled: boolean;
  selectedSkus?: Array<string | number>;
  selectedOutSkus?: Array<string | number>;
  private outSkus;
  /**
   * The id of the product to which the options are going to be fetched for.
   */
  productId: number;
  /**
   * Product detail information.
   */
  options: string;
  /**
   * Get the id's of the selected options.
   * */
  getSelectedOptionsData(): Promise<{}>;
  /**
   * Report options form validity.
   * */
  reportValidity(): Promise<boolean>;
  /**
   * Return true if there is any out of stock options are selected and vise versa.
   * */
  hasOutOfStockOption(): Promise<boolean>;
  /**
   * Get selected options.
   * */
  getSelectedOptions(): Promise<any[]>;
  /**
   * Get a specific option by its id.
   * */
  getOption(option_id: any): Promise<Option>;
  /**
   * An event that emitted when any option is changed.
   */
  changed: EventEmitter;
  private invalidHandler;
  private changedHandler;
  /**
   * loop throw all selected details, then get common sku, if it's only one, means we selected all of them;
   */
  private setSelectedSkus;
  private handleRequiredMultipleOptions;
  private getLatLng;
  private getDisplayForType;
  protected getOptionShownWhen(option: Option): {
    "data-show-when": string;
  } | {
    "data-show-when"?: undefined;
  };
  componentWillLoad(): any;
  render(): any;
  private donationOption;
  private fileUploader;
  private imageOption;
  private fileOption;
  private numberOption;
  private splitterOption;
  private textOption;
  private textareaOption;
  private mapOption;
  private colorPickerOption;
  /**
   * ============= Date Time options =============
   */
  private timeOption;
  private dateOption;
  private datetimeOption;
  /**
   * ============= Advanced options =============
   */
  protected getOptionDetailName(detail: Detail, outOfStock?: boolean, optionType?: string): string;
  protected isOptionDetailOut(detail: Detail): boolean;
  private singleOption;
  private multipleOptions;
  private colorOption;
  private thumbnailOption;
}
