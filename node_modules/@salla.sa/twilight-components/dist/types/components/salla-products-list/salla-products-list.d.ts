export declare class SallaProductsList {
  connectedCallback(): void;
  setFilters(filters: any): Promise<void>;
  reload(): Promise<void>;
  private status;
  private btnLoader;
  host: HTMLElement;
  private wrapper;
  private infiniteScroll;
  /**
   * The source of the products list
   * @type {string}
   * */
  source: 'categories' | 'latest' | 'related' | 'brands' | 'json' | 'search' | 'tags' | 'selected' | 'offers' | 'landing-page' | 'sales';
  /**
   * The source value, cloud be different values as following:
   * - array of ids when `source` in ['categories', 'brands', 'tags', 'selected']
   * - keyword when `source` = 'search'
   * - products payload when `source` = 'json'
   * - product_id when `source` = 'related'
   *
   * @type {string}
   * */
  sourceValue: any;
  /**
   * Limit for number of products in the list.
   */
  limit: number;
  /**
   * Sorting the list of products
   */
  sortBy?: string | 'ourSuggest' | 'bestSell' | 'topRated' | 'priceFromTopToLow' | 'priceFromLowToTop';
  /**
   * should listen to filters events `salla-filters::changed` and re-render
   */
  filtersResults: boolean;
  /**
   * Horizontal cards
   */
  horizontalCards: boolean;
  page: number;
  nextPage: string;
  hasInfiniteScroll: boolean;
  hasCustomComponent: boolean;
  sourceValueIsValid: boolean;
  placeholderText: string;
  isReady: boolean;
  showPlaceholder: boolean;
  parsedFilters: any;
  private isFilterable;
  private isSourceWithoutValue;
  private animateItems;
  private createStatusDom;
  private initBaseNextPageUrl;
  private buildNextPageUrl;
  private getSource;
  private getSourceValue;
  private loading;
  private getItemHTML;
  private fetchProducts;
  private initiateInfiniteScroll;
  private canRender;
  render(): any;
  componentDidLoad(): void;
  private init;
  private handleResponse;
}
